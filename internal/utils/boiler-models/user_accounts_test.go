// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserAccounts(t *testing.T) {
	t.Parallel()

	query := UserAccounts()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserAccountsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccount{}
	if err = randomize.Struct(seed, o, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserAccountsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccount{}
	if err = randomize.Struct(seed, o, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UserAccounts().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserAccountsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccount{}
	if err = randomize.Struct(seed, o, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserAccountSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserAccountsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccount{}
	if err = randomize.Struct(seed, o, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserAccountExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if UserAccount exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserAccountExists to return true, but got false.")
	}
}

func testUserAccountsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccount{}
	if err = randomize.Struct(seed, o, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userAccountFound, err := FindUserAccount(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if userAccountFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUserAccountsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccount{}
	if err = randomize.Struct(seed, o, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UserAccounts().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserAccountsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccount{}
	if err = randomize.Struct(seed, o, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UserAccounts().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserAccountsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userAccountOne := &UserAccount{}
	userAccountTwo := &UserAccount{}
	if err = randomize.Struct(seed, userAccountOne, userAccountDBTypes, false, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}
	if err = randomize.Struct(seed, userAccountTwo, userAccountDBTypes, false, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userAccountOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userAccountTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserAccounts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserAccountsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userAccountOne := &UserAccount{}
	userAccountTwo := &UserAccount{}
	if err = randomize.Struct(seed, userAccountOne, userAccountDBTypes, false, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}
	if err = randomize.Struct(seed, userAccountTwo, userAccountDBTypes, false, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userAccountOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userAccountTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func userAccountBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserAccount) error {
	*o = UserAccount{}
	return nil
}

func userAccountAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserAccount) error {
	*o = UserAccount{}
	return nil
}

func userAccountAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UserAccount) error {
	*o = UserAccount{}
	return nil
}

func userAccountBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserAccount) error {
	*o = UserAccount{}
	return nil
}

func userAccountAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserAccount) error {
	*o = UserAccount{}
	return nil
}

func userAccountBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserAccount) error {
	*o = UserAccount{}
	return nil
}

func userAccountAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserAccount) error {
	*o = UserAccount{}
	return nil
}

func userAccountBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserAccount) error {
	*o = UserAccount{}
	return nil
}

func userAccountAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserAccount) error {
	*o = UserAccount{}
	return nil
}

func testUserAccountsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UserAccount{}
	o := &UserAccount{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userAccountDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserAccount object: %s", err)
	}

	AddUserAccountHook(boil.BeforeInsertHook, userAccountBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userAccountBeforeInsertHooks = []UserAccountHook{}

	AddUserAccountHook(boil.AfterInsertHook, userAccountAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userAccountAfterInsertHooks = []UserAccountHook{}

	AddUserAccountHook(boil.AfterSelectHook, userAccountAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userAccountAfterSelectHooks = []UserAccountHook{}

	AddUserAccountHook(boil.BeforeUpdateHook, userAccountBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userAccountBeforeUpdateHooks = []UserAccountHook{}

	AddUserAccountHook(boil.AfterUpdateHook, userAccountAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userAccountAfterUpdateHooks = []UserAccountHook{}

	AddUserAccountHook(boil.BeforeDeleteHook, userAccountBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userAccountBeforeDeleteHooks = []UserAccountHook{}

	AddUserAccountHook(boil.AfterDeleteHook, userAccountAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userAccountAfterDeleteHooks = []UserAccountHook{}

	AddUserAccountHook(boil.BeforeUpsertHook, userAccountBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userAccountBeforeUpsertHooks = []UserAccountHook{}

	AddUserAccountHook(boil.AfterUpsertHook, userAccountAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userAccountAfterUpsertHooks = []UserAccountHook{}
}

func testUserAccountsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccount{}
	if err = randomize.Struct(seed, o, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserAccountsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccount{}
	if err = randomize.Struct(seed, o, userAccountDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(userAccountColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UserAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserAccountOneToOneUserTokenUsingUserUserToken(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign UserToken
	var local UserAccount

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, userTokenDBTypes, true, userTokenColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserToken struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreign.UserID = local.ID
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.UserUserToken().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.UserID != foreign.UserID {
		t.Errorf("want: %v, got %v", foreign.UserID, check.UserID)
	}

	ranAfterSelectHook := false
	AddUserTokenHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *UserToken) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := UserAccountSlice{&local}
	if err = local.L.LoadUserUserToken(ctx, tx, false, (*[]*UserAccount)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UserUserToken == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.UserUserToken = nil
	if err = local.L.LoadUserUserToken(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UserUserToken == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testUserAccountOneToOneSetOpUserTokenUsingUserUserToken(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b, c UserToken

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userTokenDBTypes, false, strmangle.SetComplement(userTokenPrimaryKeyColumns, userTokenColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userTokenDBTypes, false, strmangle.SetComplement(userTokenPrimaryKeyColumns, userTokenColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UserToken{&b, &c} {
		err = a.SetUserUserToken(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.UserUserToken != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.User != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.ID != x.UserID {
			t.Error("foreign key was wrong value", a.ID)
		}

		if exists, err := UserTokenExists(ctx, tx, x.UserID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'x' to exist")
		}

		if a.ID != x.UserID {
			t.Error("foreign key was wrong value", a.ID, x.UserID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testUserAccountToManyCreatedByUserTournaments(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b, c Tournament

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, tournamentDBTypes, false, tournamentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tournamentDBTypes, false, tournamentColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.CreatedByUser, a.ID)
	queries.Assign(&c.CreatedByUser, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CreatedByUserTournaments().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.CreatedByUser, b.CreatedByUser) {
			bFound = true
		}
		if queries.Equal(v.CreatedByUser, c.CreatedByUser) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserAccountSlice{&a}
	if err = a.L.LoadCreatedByUserTournaments(ctx, tx, false, (*[]*UserAccount)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CreatedByUserTournaments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CreatedByUserTournaments = nil
	if err = a.L.LoadCreatedByUserTournaments(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CreatedByUserTournaments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUserAccountToManyAddOpCreatedByUserTournaments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b, c, d, e Tournament

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Tournament{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tournamentDBTypes, false, strmangle.SetComplement(tournamentPrimaryKeyColumns, tournamentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Tournament{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCreatedByUserTournaments(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.CreatedByUser) {
			t.Error("foreign key was wrong value", a.ID, first.CreatedByUser)
		}
		if !queries.Equal(a.ID, second.CreatedByUser) {
			t.Error("foreign key was wrong value", a.ID, second.CreatedByUser)
		}

		if first.R.CreatedByUserUserAccount != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.CreatedByUserUserAccount != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CreatedByUserTournaments[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CreatedByUserTournaments[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CreatedByUserTournaments().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testUserAccountToManySetOpCreatedByUserTournaments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b, c, d, e Tournament

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Tournament{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tournamentDBTypes, false, strmangle.SetComplement(tournamentPrimaryKeyColumns, tournamentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCreatedByUserTournaments(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CreatedByUserTournaments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCreatedByUserTournaments(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CreatedByUserTournaments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CreatedByUser) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CreatedByUser) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.CreatedByUser) {
		t.Error("foreign key was wrong value", a.ID, d.CreatedByUser)
	}
	if !queries.Equal(a.ID, e.CreatedByUser) {
		t.Error("foreign key was wrong value", a.ID, e.CreatedByUser)
	}

	if b.R.CreatedByUserUserAccount != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.CreatedByUserUserAccount != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.CreatedByUserUserAccount != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.CreatedByUserUserAccount != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CreatedByUserTournaments[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CreatedByUserTournaments[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testUserAccountToManyRemoveOpCreatedByUserTournaments(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserAccount
	var b, c, d, e Tournament

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userAccountDBTypes, false, strmangle.SetComplement(userAccountPrimaryKeyColumns, userAccountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Tournament{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tournamentDBTypes, false, strmangle.SetComplement(tournamentPrimaryKeyColumns, tournamentColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCreatedByUserTournaments(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CreatedByUserTournaments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCreatedByUserTournaments(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CreatedByUserTournaments().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CreatedByUser) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CreatedByUser) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.CreatedByUserUserAccount != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.CreatedByUserUserAccount != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.CreatedByUserUserAccount != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.CreatedByUserUserAccount != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CreatedByUserTournaments) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CreatedByUserTournaments[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CreatedByUserTournaments[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testUserAccountsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccount{}
	if err = randomize.Struct(seed, o, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserAccountsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccount{}
	if err = randomize.Struct(seed, o, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserAccountSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserAccountsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserAccount{}
	if err = randomize.Struct(seed, o, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserAccounts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userAccountDBTypes = map[string]string{`ID`: `bigint`, `UserLogin`: `character varying`}
	_                  = bytes.MinRead
)

func testUserAccountsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userAccountPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userAccountAllColumns) == len(userAccountPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserAccount{}
	if err = randomize.Struct(seed, o, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userAccountDBTypes, true, userAccountPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserAccountsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userAccountAllColumns) == len(userAccountPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserAccount{}
	if err = randomize.Struct(seed, o, userAccountDBTypes, true, userAccountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userAccountDBTypes, true, userAccountPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userAccountAllColumns, userAccountPrimaryKeyColumns) {
		fields = userAccountAllColumns
	} else {
		fields = strmangle.SetComplement(
			userAccountAllColumns,
			userAccountPrimaryKeyColumns,
		)
		fields = strmangle.SetComplement(fields, userAccountGeneratedColumns)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserAccountSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUserAccountsUpsert(t *testing.T) {
	t.Parallel()

	if len(userAccountAllColumns) == len(userAccountPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UserAccount{}
	if err = randomize.Struct(seed, &o, userAccountDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserAccount: %s", err)
	}

	count, err := UserAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userAccountDBTypes, false, userAccountPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserAccount struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserAccount: %s", err)
	}

	count, err = UserAccounts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
