// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UsersEmail is an object representing the database table.
type UsersEmail struct {
	Email           string      `boil:"email" json:"email" toml:"email" yaml:"email"`
	IsVerified      bool        `boil:"is_verified" json:"is_verified" toml:"is_verified" yaml:"is_verified"`
	URLVerification null.String `boil:"url_verification" json:"url_verification,omitempty" toml:"url_verification" yaml:"url_verification,omitempty"`
	ChangeAt        null.Time   `boil:"change_at" json:"change_at,omitempty" toml:"change_at" yaml:"change_at,omitempty"`

	R *usersEmailR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L usersEmailL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UsersEmailColumns = struct {
	Email           string
	IsVerified      string
	URLVerification string
	ChangeAt        string
}{
	Email:           "email",
	IsVerified:      "is_verified",
	URLVerification: "url_verification",
	ChangeAt:        "change_at",
}

var UsersEmailTableColumns = struct {
	Email           string
	IsVerified      string
	URLVerification string
	ChangeAt        string
}{
	Email:           "users_email.email",
	IsVerified:      "users_email.is_verified",
	URLVerification: "users_email.url_verification",
	ChangeAt:        "users_email.change_at",
}

// Generated where

var UsersEmailWhere = struct {
	Email           whereHelperstring
	IsVerified      whereHelperbool
	URLVerification whereHelpernull_String
	ChangeAt        whereHelpernull_Time
}{
	Email:           whereHelperstring{field: "\"users_email\".\"email\""},
	IsVerified:      whereHelperbool{field: "\"users_email\".\"is_verified\""},
	URLVerification: whereHelpernull_String{field: "\"users_email\".\"url_verification\""},
	ChangeAt:        whereHelpernull_Time{field: "\"users_email\".\"change_at\""},
}

// UsersEmailRels is where relationship names are stored.
var UsersEmailRels = struct {
}{}

// usersEmailR is where relationships are stored.
type usersEmailR struct {
}

// NewStruct creates a new relationship struct
func (*usersEmailR) NewStruct() *usersEmailR {
	return &usersEmailR{}
}

// usersEmailL is where Load methods for each relationship are stored.
type usersEmailL struct{}

var (
	usersEmailAllColumns            = []string{"email", "is_verified", "url_verification", "change_at"}
	usersEmailColumnsWithoutDefault = []string{"email"}
	usersEmailColumnsWithDefault    = []string{"is_verified", "url_verification", "change_at"}
	usersEmailPrimaryKeyColumns     = []string{"email"}
	usersEmailGeneratedColumns      = []string{}
)

type (
	// UsersEmailSlice is an alias for a slice of pointers to UsersEmail.
	// This should almost always be used instead of []UsersEmail.
	UsersEmailSlice []*UsersEmail
	// UsersEmailHook is the signature for custom UsersEmail hook methods
	UsersEmailHook func(context.Context, boil.ContextExecutor, *UsersEmail) error

	usersEmailQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	usersEmailType                 = reflect.TypeOf(&UsersEmail{})
	usersEmailMapping              = queries.MakeStructMapping(usersEmailType)
	usersEmailPrimaryKeyMapping, _ = queries.BindMapping(usersEmailType, usersEmailMapping, usersEmailPrimaryKeyColumns)
	usersEmailInsertCacheMut       sync.RWMutex
	usersEmailInsertCache          = make(map[string]insertCache)
	usersEmailUpdateCacheMut       sync.RWMutex
	usersEmailUpdateCache          = make(map[string]updateCache)
	usersEmailUpsertCacheMut       sync.RWMutex
	usersEmailUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var usersEmailAfterSelectHooks []UsersEmailHook

var usersEmailBeforeInsertHooks []UsersEmailHook
var usersEmailAfterInsertHooks []UsersEmailHook

var usersEmailBeforeUpdateHooks []UsersEmailHook
var usersEmailAfterUpdateHooks []UsersEmailHook

var usersEmailBeforeDeleteHooks []UsersEmailHook
var usersEmailAfterDeleteHooks []UsersEmailHook

var usersEmailBeforeUpsertHooks []UsersEmailHook
var usersEmailAfterUpsertHooks []UsersEmailHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UsersEmail) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersEmailAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UsersEmail) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersEmailBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UsersEmail) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersEmailAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UsersEmail) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersEmailBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UsersEmail) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersEmailAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UsersEmail) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersEmailBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UsersEmail) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersEmailAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UsersEmail) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersEmailBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UsersEmail) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersEmailAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUsersEmailHook registers your hook function for all future operations.
func AddUsersEmailHook(hookPoint boil.HookPoint, usersEmailHook UsersEmailHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		usersEmailAfterSelectHooks = append(usersEmailAfterSelectHooks, usersEmailHook)
	case boil.BeforeInsertHook:
		usersEmailBeforeInsertHooks = append(usersEmailBeforeInsertHooks, usersEmailHook)
	case boil.AfterInsertHook:
		usersEmailAfterInsertHooks = append(usersEmailAfterInsertHooks, usersEmailHook)
	case boil.BeforeUpdateHook:
		usersEmailBeforeUpdateHooks = append(usersEmailBeforeUpdateHooks, usersEmailHook)
	case boil.AfterUpdateHook:
		usersEmailAfterUpdateHooks = append(usersEmailAfterUpdateHooks, usersEmailHook)
	case boil.BeforeDeleteHook:
		usersEmailBeforeDeleteHooks = append(usersEmailBeforeDeleteHooks, usersEmailHook)
	case boil.AfterDeleteHook:
		usersEmailAfterDeleteHooks = append(usersEmailAfterDeleteHooks, usersEmailHook)
	case boil.BeforeUpsertHook:
		usersEmailBeforeUpsertHooks = append(usersEmailBeforeUpsertHooks, usersEmailHook)
	case boil.AfterUpsertHook:
		usersEmailAfterUpsertHooks = append(usersEmailAfterUpsertHooks, usersEmailHook)
	}
}

// One returns a single usersEmail record from the query.
func (q usersEmailQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UsersEmail, error) {
	o := &UsersEmail{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for users_email")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UsersEmail records from the query.
func (q usersEmailQuery) All(ctx context.Context, exec boil.ContextExecutor) (UsersEmailSlice, error) {
	var o []*UsersEmail

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to UsersEmail slice")
	}

	if len(usersEmailAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UsersEmail records in the query.
func (q usersEmailQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count users_email rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q usersEmailQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if users_email exists")
	}

	return count > 0, nil
}

// UsersEmails retrieves all the records using an executor.
func UsersEmails(mods ...qm.QueryMod) usersEmailQuery {
	mods = append(mods, qm.From("\"users_email\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"users_email\".*"})
	}

	return usersEmailQuery{q}
}

// FindUsersEmail retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUsersEmail(ctx context.Context, exec boil.ContextExecutor, email string, selectCols ...string) (*UsersEmail, error) {
	usersEmailObj := &UsersEmail{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"users_email\" where \"email\"=$1", sel,
	)

	q := queries.Raw(query, email)

	err := q.Bind(ctx, exec, usersEmailObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from users_email")
	}

	if err = usersEmailObj.doAfterSelectHooks(ctx, exec); err != nil {
		return usersEmailObj, err
	}

	return usersEmailObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UsersEmail) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no users_email provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usersEmailColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	usersEmailInsertCacheMut.RLock()
	cache, cached := usersEmailInsertCache[key]
	usersEmailInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			usersEmailAllColumns,
			usersEmailColumnsWithDefault,
			usersEmailColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(usersEmailType, usersEmailMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(usersEmailType, usersEmailMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"users_email\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"users_email\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into users_email")
	}

	if !cached {
		usersEmailInsertCacheMut.Lock()
		usersEmailInsertCache[key] = cache
		usersEmailInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UsersEmail.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UsersEmail) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	usersEmailUpdateCacheMut.RLock()
	cache, cached := usersEmailUpdateCache[key]
	usersEmailUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			usersEmailAllColumns,
			usersEmailPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update users_email, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"users_email\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, usersEmailPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(usersEmailType, usersEmailMapping, append(wl, usersEmailPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update users_email row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for users_email")
	}

	if !cached {
		usersEmailUpdateCacheMut.Lock()
		usersEmailUpdateCache[key] = cache
		usersEmailUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q usersEmailQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for users_email")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for users_email")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UsersEmailSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usersEmailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"users_email\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, usersEmailPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in usersEmail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all usersEmail")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UsersEmail) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no users_email provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usersEmailColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	usersEmailUpsertCacheMut.RLock()
	cache, cached := usersEmailUpsertCache[key]
	usersEmailUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			usersEmailAllColumns,
			usersEmailColumnsWithDefault,
			usersEmailColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			usersEmailAllColumns,
			usersEmailPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert users_email, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(usersEmailPrimaryKeyColumns))
			copy(conflict, usersEmailPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"users_email\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(usersEmailType, usersEmailMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(usersEmailType, usersEmailMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert users_email")
	}

	if !cached {
		usersEmailUpsertCacheMut.Lock()
		usersEmailUpsertCache[key] = cache
		usersEmailUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UsersEmail record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UsersEmail) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no UsersEmail provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), usersEmailPrimaryKeyMapping)
	sql := "DELETE FROM \"users_email\" WHERE \"email\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from users_email")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for users_email")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q usersEmailQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no usersEmailQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from users_email")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for users_email")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UsersEmailSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(usersEmailBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usersEmailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"users_email\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usersEmailPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from usersEmail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for users_email")
	}

	if len(usersEmailAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UsersEmail) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUsersEmail(ctx, exec, o.Email)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UsersEmailSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UsersEmailSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usersEmailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"users_email\".* FROM \"users_email\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usersEmailPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in UsersEmailSlice")
	}

	*o = slice

	return nil
}

// UsersEmailExists checks if the UsersEmail row exists.
func UsersEmailExists(ctx context.Context, exec boil.ContextExecutor, email string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"users_email\" where \"email\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, email)
	}
	row := exec.QueryRowContext(ctx, sql, email)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if users_email exists")
	}

	return exists, nil
}

// Exists checks if the UsersEmail row exists.
func (o *UsersEmail) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UsersEmailExists(ctx, exec, o.Email)
}
