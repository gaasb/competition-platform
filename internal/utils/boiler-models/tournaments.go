// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Tournament is an object representing the database table.
type Tournament struct {
	ID            string     `boil:"id" json:"id" toml:"id" yaml:"id"`
	SportName     string     `boil:"sport_name" json:"sport_name" toml:"sport_name" yaml:"sport_name"`
	Title         string     `boil:"title" json:"title" toml:"title" yaml:"title"`
	StartAt       time.Time  `boil:"start_at" json:"start_at" toml:"start_at" yaml:"start_at"`
	EndAt         time.Time  `boil:"end_at" json:"end_at" toml:"end_at" yaml:"end_at"`
	Description   null.JSON  `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	CreatedByUser null.Int64 `boil:"created_by_user" json:"created_by_user,omitempty" toml:"created_by_user" yaml:"created_by_user,omitempty"`
	BracketsLimit int        `boil:"brackets_limit" json:"brackets_limit" toml:"brackets_limit" yaml:"brackets_limit"`
	IsActive      bool       `boil:"is_active" json:"is_active" toml:"is_active" yaml:"is_active"`

	R *tournamentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tournamentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TournamentColumns = struct {
	ID            string
	SportName     string
	Title         string
	StartAt       string
	EndAt         string
	Description   string
	CreatedByUser string
	BracketsLimit string
	IsActive      string
}{
	ID:            "id",
	SportName:     "sport_name",
	Title:         "title",
	StartAt:       "start_at",
	EndAt:         "end_at",
	Description:   "description",
	CreatedByUser: "created_by_user",
	BracketsLimit: "brackets_limit",
	IsActive:      "is_active",
}

var TournamentTableColumns = struct {
	ID            string
	SportName     string
	Title         string
	StartAt       string
	EndAt         string
	Description   string
	CreatedByUser string
	BracketsLimit string
	IsActive      string
}{
	ID:            "tournaments.id",
	SportName:     "tournaments.sport_name",
	Title:         "tournaments.title",
	StartAt:       "tournaments.start_at",
	EndAt:         "tournaments.end_at",
	Description:   "tournaments.description",
	CreatedByUser: "tournaments.created_by_user",
	BracketsLimit: "tournaments.brackets_limit",
	IsActive:      "tournaments.is_active",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var TournamentWhere = struct {
	ID            whereHelperstring
	SportName     whereHelperstring
	Title         whereHelperstring
	StartAt       whereHelpertime_Time
	EndAt         whereHelpertime_Time
	Description   whereHelpernull_JSON
	CreatedByUser whereHelpernull_Int64
	BracketsLimit whereHelperint
	IsActive      whereHelperbool
}{
	ID:            whereHelperstring{field: "\"tournaments\".\"id\""},
	SportName:     whereHelperstring{field: "\"tournaments\".\"sport_name\""},
	Title:         whereHelperstring{field: "\"tournaments\".\"title\""},
	StartAt:       whereHelpertime_Time{field: "\"tournaments\".\"start_at\""},
	EndAt:         whereHelpertime_Time{field: "\"tournaments\".\"end_at\""},
	Description:   whereHelpernull_JSON{field: "\"tournaments\".\"description\""},
	CreatedByUser: whereHelpernull_Int64{field: "\"tournaments\".\"created_by_user\""},
	BracketsLimit: whereHelperint{field: "\"tournaments\".\"brackets_limit\""},
	IsActive:      whereHelperbool{field: "\"tournaments\".\"is_active\""},
}

// TournamentRels is where relationship names are stored.
var TournamentRels = struct {
	CreatedByUserUserAccount string
	Brackets                 string
}{
	CreatedByUserUserAccount: "CreatedByUserUserAccount",
	Brackets:                 "Brackets",
}

// tournamentR is where relationships are stored.
type tournamentR struct {
	CreatedByUserUserAccount *UserAccount `boil:"CreatedByUserUserAccount" json:"CreatedByUserUserAccount" toml:"CreatedByUserUserAccount" yaml:"CreatedByUserUserAccount"`
	Brackets                 BracketSlice `boil:"Brackets" json:"Brackets" toml:"Brackets" yaml:"Brackets"`
}

// NewStruct creates a new relationship struct
func (*tournamentR) NewStruct() *tournamentR {
	return &tournamentR{}
}

func (r *tournamentR) GetCreatedByUserUserAccount() *UserAccount {
	if r == nil {
		return nil
	}
	return r.CreatedByUserUserAccount
}

func (r *tournamentR) GetBrackets() BracketSlice {
	if r == nil {
		return nil
	}
	return r.Brackets
}

// tournamentL is where Load methods for each relationship are stored.
type tournamentL struct{}

var (
	tournamentAllColumns            = []string{"id", "sport_name", "title", "start_at", "end_at", "description", "created_by_user", "brackets_limit", "is_active"}
	tournamentColumnsWithoutDefault = []string{"id", "sport_name", "title", "start_at", "end_at"}
	tournamentColumnsWithDefault    = []string{"description", "created_by_user", "brackets_limit", "is_active"}
	tournamentPrimaryKeyColumns     = []string{"id"}
	tournamentGeneratedColumns      = []string{}
)

type (
	// TournamentSlice is an alias for a slice of pointers to Tournament.
	// This should almost always be used instead of []Tournament.
	TournamentSlice []*Tournament
	// TournamentHook is the signature for custom Tournament hook methods
	TournamentHook func(context.Context, boil.ContextExecutor, *Tournament) error

	tournamentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tournamentType                 = reflect.TypeOf(&Tournament{})
	tournamentMapping              = queries.MakeStructMapping(tournamentType)
	tournamentPrimaryKeyMapping, _ = queries.BindMapping(tournamentType, tournamentMapping, tournamentPrimaryKeyColumns)
	tournamentInsertCacheMut       sync.RWMutex
	tournamentInsertCache          = make(map[string]insertCache)
	tournamentUpdateCacheMut       sync.RWMutex
	tournamentUpdateCache          = make(map[string]updateCache)
	tournamentUpsertCacheMut       sync.RWMutex
	tournamentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tournamentAfterSelectHooks []TournamentHook

var tournamentBeforeInsertHooks []TournamentHook
var tournamentAfterInsertHooks []TournamentHook

var tournamentBeforeUpdateHooks []TournamentHook
var tournamentAfterUpdateHooks []TournamentHook

var tournamentBeforeDeleteHooks []TournamentHook
var tournamentAfterDeleteHooks []TournamentHook

var tournamentBeforeUpsertHooks []TournamentHook
var tournamentAfterUpsertHooks []TournamentHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Tournament) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tournamentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Tournament) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tournamentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Tournament) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tournamentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Tournament) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tournamentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Tournament) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tournamentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Tournament) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tournamentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Tournament) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tournamentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Tournament) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tournamentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Tournament) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tournamentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTournamentHook registers your hook function for all future operations.
func AddTournamentHook(hookPoint boil.HookPoint, tournamentHook TournamentHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tournamentAfterSelectHooks = append(tournamentAfterSelectHooks, tournamentHook)
	case boil.BeforeInsertHook:
		tournamentBeforeInsertHooks = append(tournamentBeforeInsertHooks, tournamentHook)
	case boil.AfterInsertHook:
		tournamentAfterInsertHooks = append(tournamentAfterInsertHooks, tournamentHook)
	case boil.BeforeUpdateHook:
		tournamentBeforeUpdateHooks = append(tournamentBeforeUpdateHooks, tournamentHook)
	case boil.AfterUpdateHook:
		tournamentAfterUpdateHooks = append(tournamentAfterUpdateHooks, tournamentHook)
	case boil.BeforeDeleteHook:
		tournamentBeforeDeleteHooks = append(tournamentBeforeDeleteHooks, tournamentHook)
	case boil.AfterDeleteHook:
		tournamentAfterDeleteHooks = append(tournamentAfterDeleteHooks, tournamentHook)
	case boil.BeforeUpsertHook:
		tournamentBeforeUpsertHooks = append(tournamentBeforeUpsertHooks, tournamentHook)
	case boil.AfterUpsertHook:
		tournamentAfterUpsertHooks = append(tournamentAfterUpsertHooks, tournamentHook)
	}
}

// One returns a single tournament record from the query.
func (q tournamentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Tournament, error) {
	o := &Tournament{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for tournaments")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Tournament records from the query.
func (q tournamentQuery) All(ctx context.Context, exec boil.ContextExecutor) (TournamentSlice, error) {
	var o []*Tournament

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Tournament slice")
	}

	if len(tournamentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Tournament records in the query.
func (q tournamentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count tournaments rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tournamentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if tournaments exists")
	}

	return count > 0, nil
}

// CreatedByUserUserAccount pointed to by the foreign key.
func (o *Tournament) CreatedByUserUserAccount(mods ...qm.QueryMod) userAccountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreatedByUser),
	}

	queryMods = append(queryMods, mods...)

	return UserAccounts(queryMods...)
}

// Brackets retrieves all the bracket's Brackets with an executor.
func (o *Tournament) Brackets(mods ...qm.QueryMod) bracketQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"brackets\".\"tournament_id\"=?", o.ID),
	)

	return Brackets(queryMods...)
}

// LoadCreatedByUserUserAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tournamentL) LoadCreatedByUserUserAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTournament interface{}, mods queries.Applicator) error {
	var slice []*Tournament
	var object *Tournament

	if singular {
		var ok bool
		object, ok = maybeTournament.(*Tournament)
		if !ok {
			object = new(Tournament)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTournament)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTournament))
			}
		}
	} else {
		s, ok := maybeTournament.(*[]*Tournament)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTournament)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTournament))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tournamentR{}
		}
		if !queries.IsNil(object.CreatedByUser) {
			args = append(args, object.CreatedByUser)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tournamentR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CreatedByUser) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CreatedByUser) {
				args = append(args, obj.CreatedByUser)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_accounts`),
		qm.WhereIn(`user_accounts.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserAccount")
	}

	var resultSlice []*UserAccount
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserAccount")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_accounts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_accounts")
	}

	if len(userAccountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedByUserUserAccount = foreign
		if foreign.R == nil {
			foreign.R = &userAccountR{}
		}
		foreign.R.CreatedByUserTournaments = append(foreign.R.CreatedByUserTournaments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CreatedByUser, foreign.ID) {
				local.R.CreatedByUserUserAccount = foreign
				if foreign.R == nil {
					foreign.R = &userAccountR{}
				}
				foreign.R.CreatedByUserTournaments = append(foreign.R.CreatedByUserTournaments, local)
				break
			}
		}
	}

	return nil
}

// LoadBrackets allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tournamentL) LoadBrackets(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTournament interface{}, mods queries.Applicator) error {
	var slice []*Tournament
	var object *Tournament

	if singular {
		var ok bool
		object, ok = maybeTournament.(*Tournament)
		if !ok {
			object = new(Tournament)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTournament)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTournament))
			}
		}
	} else {
		s, ok := maybeTournament.(*[]*Tournament)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTournament)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTournament))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tournamentR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tournamentR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`brackets`),
		qm.WhereIn(`brackets.tournament_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load brackets")
	}

	var resultSlice []*Bracket
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice brackets")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on brackets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for brackets")
	}

	if len(bracketAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Brackets = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &bracketR{}
			}
			foreign.R.Tournament = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.TournamentID) {
				local.R.Brackets = append(local.R.Brackets, foreign)
				if foreign.R == nil {
					foreign.R = &bracketR{}
				}
				foreign.R.Tournament = local
				break
			}
		}
	}

	return nil
}

// SetCreatedByUserUserAccount of the tournament to the related item.
// Sets o.R.CreatedByUserUserAccount to related.
// Adds o to related.R.CreatedByUserTournaments.
func (o *Tournament) SetCreatedByUserUserAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserAccount) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"tournaments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_user"}),
		strmangle.WhereClause("\"", "\"", 2, tournamentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CreatedByUser, related.ID)
	if o.R == nil {
		o.R = &tournamentR{
			CreatedByUserUserAccount: related,
		}
	} else {
		o.R.CreatedByUserUserAccount = related
	}

	if related.R == nil {
		related.R = &userAccountR{
			CreatedByUserTournaments: TournamentSlice{o},
		}
	} else {
		related.R.CreatedByUserTournaments = append(related.R.CreatedByUserTournaments, o)
	}

	return nil
}

// RemoveCreatedByUserUserAccount relationship.
// Sets o.R.CreatedByUserUserAccount to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Tournament) RemoveCreatedByUserUserAccount(ctx context.Context, exec boil.ContextExecutor, related *UserAccount) error {
	var err error

	queries.SetScanner(&o.CreatedByUser, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("created_by_user")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CreatedByUserUserAccount = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CreatedByUserTournaments {
		if queries.Equal(o.CreatedByUser, ri.CreatedByUser) {
			continue
		}

		ln := len(related.R.CreatedByUserTournaments)
		if ln > 1 && i < ln-1 {
			related.R.CreatedByUserTournaments[i] = related.R.CreatedByUserTournaments[ln-1]
		}
		related.R.CreatedByUserTournaments = related.R.CreatedByUserTournaments[:ln-1]
		break
	}
	return nil
}

// AddBrackets adds the given related objects to the existing relationships
// of the tournament, optionally inserting them as new records.
// Appends related to o.R.Brackets.
// Sets related.R.Tournament appropriately.
func (o *Tournament) AddBrackets(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Bracket) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TournamentID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"brackets\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"tournament_id"}),
				strmangle.WhereClause("\"", "\"", 2, bracketPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TournamentID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &tournamentR{
			Brackets: related,
		}
	} else {
		o.R.Brackets = append(o.R.Brackets, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &bracketR{
				Tournament: o,
			}
		} else {
			rel.R.Tournament = o
		}
	}
	return nil
}

// SetBrackets removes all previously related items of the
// tournament replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Tournament's Brackets accordingly.
// Replaces o.R.Brackets with related.
// Sets related.R.Tournament's Brackets accordingly.
func (o *Tournament) SetBrackets(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Bracket) error {
	query := "update \"brackets\" set \"tournament_id\" = null where \"tournament_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Brackets {
			queries.SetScanner(&rel.TournamentID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Tournament = nil
		}
		o.R.Brackets = nil
	}

	return o.AddBrackets(ctx, exec, insert, related...)
}

// RemoveBrackets relationships from objects passed in.
// Removes related items from R.Brackets (uses pointer comparison, removal does not keep order)
// Sets related.R.Tournament.
func (o *Tournament) RemoveBrackets(ctx context.Context, exec boil.ContextExecutor, related ...*Bracket) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TournamentID, nil)
		if rel.R != nil {
			rel.R.Tournament = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("tournament_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Brackets {
			if rel != ri {
				continue
			}

			ln := len(o.R.Brackets)
			if ln > 1 && i < ln-1 {
				o.R.Brackets[i] = o.R.Brackets[ln-1]
			}
			o.R.Brackets = o.R.Brackets[:ln-1]
			break
		}
	}

	return nil
}

// Tournaments retrieves all the records using an executor.
func Tournaments(mods ...qm.QueryMod) tournamentQuery {
	mods = append(mods, qm.From("\"tournaments\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"tournaments\".*"})
	}

	return tournamentQuery{q}
}

// FindTournament retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTournament(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Tournament, error) {
	tournamentObj := &Tournament{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tournaments\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, tournamentObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from tournaments")
	}

	if err = tournamentObj.doAfterSelectHooks(ctx, exec); err != nil {
		return tournamentObj, err
	}

	return tournamentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Tournament) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no tournaments provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tournamentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tournamentInsertCacheMut.RLock()
	cache, cached := tournamentInsertCache[key]
	tournamentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tournamentAllColumns,
			tournamentColumnsWithDefault,
			tournamentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tournamentType, tournamentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tournamentType, tournamentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tournaments\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tournaments\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into tournaments")
	}

	if !cached {
		tournamentInsertCacheMut.Lock()
		tournamentInsertCache[key] = cache
		tournamentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Tournament.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Tournament) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tournamentUpdateCacheMut.RLock()
	cache, cached := tournamentUpdateCache[key]
	tournamentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tournamentAllColumns,
			tournamentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update tournaments, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tournaments\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, tournamentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tournamentType, tournamentMapping, append(wl, tournamentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update tournaments row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for tournaments")
	}

	if !cached {
		tournamentUpdateCacheMut.Lock()
		tournamentUpdateCache[key] = cache
		tournamentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tournamentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for tournaments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for tournaments")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TournamentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tournamentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tournaments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tournamentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in tournament slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all tournament")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Tournament) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no tournaments provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tournamentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tournamentUpsertCacheMut.RLock()
	cache, cached := tournamentUpsertCache[key]
	tournamentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tournamentAllColumns,
			tournamentColumnsWithDefault,
			tournamentColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			tournamentAllColumns,
			tournamentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert tournaments, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(tournamentPrimaryKeyColumns))
			copy(conflict, tournamentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"tournaments\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(tournamentType, tournamentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tournamentType, tournamentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert tournaments")
	}

	if !cached {
		tournamentUpsertCacheMut.Lock()
		tournamentUpsertCache[key] = cache
		tournamentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Tournament record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Tournament) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no Tournament provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tournamentPrimaryKeyMapping)
	sql := "DELETE FROM \"tournaments\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from tournaments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for tournaments")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tournamentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no tournamentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from tournaments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for tournaments")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TournamentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tournamentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tournamentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tournaments\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tournamentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from tournament slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for tournaments")
	}

	if len(tournamentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Tournament) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTournament(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TournamentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TournamentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tournamentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tournaments\".* FROM \"tournaments\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tournamentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in TournamentSlice")
	}

	*o = slice

	return nil
}

// TournamentExists checks if the Tournament row exists.
func TournamentExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tournaments\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if tournaments exists")
	}

	return exists, nil
}

// Exists checks if the Tournament row exists.
func (o *Tournament) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TournamentExists(ctx, exec, o.ID)
}
