// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Brackets", testBrackets)
	t.Run("Teams", testTeams)
	t.Run("Tournaments", testTournaments)
	t.Run("UserAccounts", testUserAccounts)
	t.Run("UserTokens", testUserTokens)
	t.Run("UsersEmails", testUsersEmails)
}

func TestDelete(t *testing.T) {
	t.Run("Brackets", testBracketsDelete)
	t.Run("Teams", testTeamsDelete)
	t.Run("Tournaments", testTournamentsDelete)
	t.Run("UserAccounts", testUserAccountsDelete)
	t.Run("UserTokens", testUserTokensDelete)
	t.Run("UsersEmails", testUsersEmailsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Brackets", testBracketsQueryDeleteAll)
	t.Run("Teams", testTeamsQueryDeleteAll)
	t.Run("Tournaments", testTournamentsQueryDeleteAll)
	t.Run("UserAccounts", testUserAccountsQueryDeleteAll)
	t.Run("UserTokens", testUserTokensQueryDeleteAll)
	t.Run("UsersEmails", testUsersEmailsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Brackets", testBracketsSliceDeleteAll)
	t.Run("Teams", testTeamsSliceDeleteAll)
	t.Run("Tournaments", testTournamentsSliceDeleteAll)
	t.Run("UserAccounts", testUserAccountsSliceDeleteAll)
	t.Run("UserTokens", testUserTokensSliceDeleteAll)
	t.Run("UsersEmails", testUsersEmailsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Brackets", testBracketsExists)
	t.Run("Teams", testTeamsExists)
	t.Run("Tournaments", testTournamentsExists)
	t.Run("UserAccounts", testUserAccountsExists)
	t.Run("UserTokens", testUserTokensExists)
	t.Run("UsersEmails", testUsersEmailsExists)
}

func TestFind(t *testing.T) {
	t.Run("Brackets", testBracketsFind)
	t.Run("Teams", testTeamsFind)
	t.Run("Tournaments", testTournamentsFind)
	t.Run("UserAccounts", testUserAccountsFind)
	t.Run("UserTokens", testUserTokensFind)
	t.Run("UsersEmails", testUsersEmailsFind)
}

func TestBind(t *testing.T) {
	t.Run("Brackets", testBracketsBind)
	t.Run("Teams", testTeamsBind)
	t.Run("Tournaments", testTournamentsBind)
	t.Run("UserAccounts", testUserAccountsBind)
	t.Run("UserTokens", testUserTokensBind)
	t.Run("UsersEmails", testUsersEmailsBind)
}

func TestOne(t *testing.T) {
	t.Run("Brackets", testBracketsOne)
	t.Run("Teams", testTeamsOne)
	t.Run("Tournaments", testTournamentsOne)
	t.Run("UserAccounts", testUserAccountsOne)
	t.Run("UserTokens", testUserTokensOne)
	t.Run("UsersEmails", testUsersEmailsOne)
}

func TestAll(t *testing.T) {
	t.Run("Brackets", testBracketsAll)
	t.Run("Teams", testTeamsAll)
	t.Run("Tournaments", testTournamentsAll)
	t.Run("UserAccounts", testUserAccountsAll)
	t.Run("UserTokens", testUserTokensAll)
	t.Run("UsersEmails", testUsersEmailsAll)
}

func TestCount(t *testing.T) {
	t.Run("Brackets", testBracketsCount)
	t.Run("Teams", testTeamsCount)
	t.Run("Tournaments", testTournamentsCount)
	t.Run("UserAccounts", testUserAccountsCount)
	t.Run("UserTokens", testUserTokensCount)
	t.Run("UsersEmails", testUsersEmailsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Brackets", testBracketsHooks)
	t.Run("Teams", testTeamsHooks)
	t.Run("Tournaments", testTournamentsHooks)
	t.Run("UserAccounts", testUserAccountsHooks)
	t.Run("UserTokens", testUserTokensHooks)
	t.Run("UsersEmails", testUsersEmailsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Brackets", testBracketsInsert)
	t.Run("Brackets", testBracketsInsertWhitelist)
	t.Run("Teams", testTeamsInsert)
	t.Run("Teams", testTeamsInsertWhitelist)
	t.Run("Tournaments", testTournamentsInsert)
	t.Run("Tournaments", testTournamentsInsertWhitelist)
	t.Run("UserAccounts", testUserAccountsInsert)
	t.Run("UserAccounts", testUserAccountsInsertWhitelist)
	t.Run("UserTokens", testUserTokensInsert)
	t.Run("UserTokens", testUserTokensInsertWhitelist)
	t.Run("UsersEmails", testUsersEmailsInsert)
	t.Run("UsersEmails", testUsersEmailsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("BracketToTournamentUsingTournament", testBracketToOneTournamentUsingTournament)
	t.Run("TeamToBracketUsingBracket", testTeamToOneBracketUsingBracket)
	t.Run("TournamentToUserAccountUsingCreatedByUserUserAccount", testTournamentToOneUserAccountUsingCreatedByUserUserAccount)
	t.Run("UserTokenToUserAccountUsingUser", testUserTokenToOneUserAccountUsingUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {
	t.Run("UserAccountToUserTokenUsingUserUserToken", testUserAccountOneToOneUserTokenUsingUserUserToken)
}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("BracketToTeams", testBracketToManyTeams)
	t.Run("TournamentToBrackets", testTournamentToManyBrackets)
	t.Run("UserAccountToCreatedByUserTournaments", testUserAccountToManyCreatedByUserTournaments)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("BracketToTournamentUsingBrackets", testBracketToOneSetOpTournamentUsingTournament)
	t.Run("TeamToBracketUsingTeams", testTeamToOneSetOpBracketUsingBracket)
	t.Run("TournamentToUserAccountUsingCreatedByUserTournaments", testTournamentToOneSetOpUserAccountUsingCreatedByUserUserAccount)
	t.Run("UserTokenToUserAccountUsingUserUserToken", testUserTokenToOneSetOpUserAccountUsingUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("BracketToTournamentUsingBrackets", testBracketToOneRemoveOpTournamentUsingTournament)
	t.Run("TeamToBracketUsingTeams", testTeamToOneRemoveOpBracketUsingBracket)
	t.Run("TournamentToUserAccountUsingCreatedByUserTournaments", testTournamentToOneRemoveOpUserAccountUsingCreatedByUserUserAccount)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {
	t.Run("UserAccountToUserTokenUsingUserUserToken", testUserAccountOneToOneSetOpUserTokenUsingUserUserToken)
}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("BracketToTeams", testBracketToManyAddOpTeams)
	t.Run("TournamentToBrackets", testTournamentToManyAddOpBrackets)
	t.Run("UserAccountToCreatedByUserTournaments", testUserAccountToManyAddOpCreatedByUserTournaments)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("BracketToTeams", testBracketToManySetOpTeams)
	t.Run("TournamentToBrackets", testTournamentToManySetOpBrackets)
	t.Run("UserAccountToCreatedByUserTournaments", testUserAccountToManySetOpCreatedByUserTournaments)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("BracketToTeams", testBracketToManyRemoveOpTeams)
	t.Run("TournamentToBrackets", testTournamentToManyRemoveOpBrackets)
	t.Run("UserAccountToCreatedByUserTournaments", testUserAccountToManyRemoveOpCreatedByUserTournaments)
}

func TestReload(t *testing.T) {
	t.Run("Brackets", testBracketsReload)
	t.Run("Teams", testTeamsReload)
	t.Run("Tournaments", testTournamentsReload)
	t.Run("UserAccounts", testUserAccountsReload)
	t.Run("UserTokens", testUserTokensReload)
	t.Run("UsersEmails", testUsersEmailsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Brackets", testBracketsReloadAll)
	t.Run("Teams", testTeamsReloadAll)
	t.Run("Tournaments", testTournamentsReloadAll)
	t.Run("UserAccounts", testUserAccountsReloadAll)
	t.Run("UserTokens", testUserTokensReloadAll)
	t.Run("UsersEmails", testUsersEmailsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Brackets", testBracketsSelect)
	t.Run("Teams", testTeamsSelect)
	t.Run("Tournaments", testTournamentsSelect)
	t.Run("UserAccounts", testUserAccountsSelect)
	t.Run("UserTokens", testUserTokensSelect)
	t.Run("UsersEmails", testUsersEmailsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Brackets", testBracketsUpdate)
	t.Run("Teams", testTeamsUpdate)
	t.Run("Tournaments", testTournamentsUpdate)
	t.Run("UserAccounts", testUserAccountsUpdate)
	t.Run("UserTokens", testUserTokensUpdate)
	t.Run("UsersEmails", testUsersEmailsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Brackets", testBracketsSliceUpdateAll)
	t.Run("Teams", testTeamsSliceUpdateAll)
	t.Run("Tournaments", testTournamentsSliceUpdateAll)
	t.Run("UserAccounts", testUserAccountsSliceUpdateAll)
	t.Run("UserTokens", testUserTokensSliceUpdateAll)
	t.Run("UsersEmails", testUsersEmailsSliceUpdateAll)
}
