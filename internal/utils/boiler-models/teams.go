// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Team is an object representing the database table.
type Team struct {
	ID        int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	TeamAlias string      `boil:"team_alias" json:"team_alias" toml:"team_alias" yaml:"team_alias"`
	BracketID null.String `boil:"bracket_id" json:"bracket_id,omitempty" toml:"bracket_id" yaml:"bracket_id,omitempty"`

	R *teamR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L teamL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TeamColumns = struct {
	ID        string
	TeamAlias string
	BracketID string
}{
	ID:        "id",
	TeamAlias: "team_alias",
	BracketID: "bracket_id",
}

var TeamTableColumns = struct {
	ID        string
	TeamAlias string
	BracketID string
}{
	ID:        "teams.id",
	TeamAlias: "teams.team_alias",
	BracketID: "teams.bracket_id",
}

// Generated where

var TeamWhere = struct {
	ID        whereHelperint64
	TeamAlias whereHelperstring
	BracketID whereHelpernull_String
}{
	ID:        whereHelperint64{field: "\"teams\".\"id\""},
	TeamAlias: whereHelperstring{field: "\"teams\".\"team_alias\""},
	BracketID: whereHelpernull_String{field: "\"teams\".\"bracket_id\""},
}

// TeamRels is where relationship names are stored.
var TeamRels = struct {
	Bracket           string
	FirstTeamMatches  string
	SecondTeamMatches string
	WinnerMatches     string
	Participants      string
}{
	Bracket:           "Bracket",
	FirstTeamMatches:  "FirstTeamMatches",
	SecondTeamMatches: "SecondTeamMatches",
	WinnerMatches:     "WinnerMatches",
	Participants:      "Participants",
}

// teamR is where relationships are stored.
type teamR struct {
	Bracket           *Bracket         `boil:"Bracket" json:"Bracket" toml:"Bracket" yaml:"Bracket"`
	FirstTeamMatches  MatchSlice       `boil:"FirstTeamMatches" json:"FirstTeamMatches" toml:"FirstTeamMatches" yaml:"FirstTeamMatches"`
	SecondTeamMatches MatchSlice       `boil:"SecondTeamMatches" json:"SecondTeamMatches" toml:"SecondTeamMatches" yaml:"SecondTeamMatches"`
	WinnerMatches     MatchSlice       `boil:"WinnerMatches" json:"WinnerMatches" toml:"WinnerMatches" yaml:"WinnerMatches"`
	Participants      ParticipantSlice `boil:"Participants" json:"Participants" toml:"Participants" yaml:"Participants"`
}

// NewStruct creates a new relationship struct
func (*teamR) NewStruct() *teamR {
	return &teamR{}
}

func (r *teamR) GetBracket() *Bracket {
	if r == nil {
		return nil
	}
	return r.Bracket
}

func (r *teamR) GetFirstTeamMatches() MatchSlice {
	if r == nil {
		return nil
	}
	return r.FirstTeamMatches
}

func (r *teamR) GetSecondTeamMatches() MatchSlice {
	if r == nil {
		return nil
	}
	return r.SecondTeamMatches
}

func (r *teamR) GetWinnerMatches() MatchSlice {
	if r == nil {
		return nil
	}
	return r.WinnerMatches
}

func (r *teamR) GetParticipants() ParticipantSlice {
	if r == nil {
		return nil
	}
	return r.Participants
}

// teamL is where Load methods for each relationship are stored.
type teamL struct{}

var (
	teamAllColumns            = []string{"id", "team_alias", "bracket_id"}
	teamColumnsWithoutDefault = []string{"team_alias"}
	teamColumnsWithDefault    = []string{"id", "bracket_id"}
	teamPrimaryKeyColumns     = []string{"id"}
	teamGeneratedColumns      = []string{"id"}
)

type (
	// TeamSlice is an alias for a slice of pointers to Team.
	// This should almost always be used instead of []Team.
	TeamSlice []*Team
	// TeamHook is the signature for custom Team hook methods
	TeamHook func(context.Context, boil.ContextExecutor, *Team) error

	teamQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	teamType                 = reflect.TypeOf(&Team{})
	teamMapping              = queries.MakeStructMapping(teamType)
	teamPrimaryKeyMapping, _ = queries.BindMapping(teamType, teamMapping, teamPrimaryKeyColumns)
	teamInsertCacheMut       sync.RWMutex
	teamInsertCache          = make(map[string]insertCache)
	teamUpdateCacheMut       sync.RWMutex
	teamUpdateCache          = make(map[string]updateCache)
	teamUpsertCacheMut       sync.RWMutex
	teamUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var teamAfterSelectHooks []TeamHook

var teamBeforeInsertHooks []TeamHook
var teamAfterInsertHooks []TeamHook

var teamBeforeUpdateHooks []TeamHook
var teamAfterUpdateHooks []TeamHook

var teamBeforeDeleteHooks []TeamHook
var teamAfterDeleteHooks []TeamHook

var teamBeforeUpsertHooks []TeamHook
var teamAfterUpsertHooks []TeamHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Team) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Team) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Team) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Team) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Team) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Team) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Team) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Team) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Team) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTeamHook registers your hook function for all future operations.
func AddTeamHook(hookPoint boil.HookPoint, teamHook TeamHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		teamAfterSelectHooks = append(teamAfterSelectHooks, teamHook)
	case boil.BeforeInsertHook:
		teamBeforeInsertHooks = append(teamBeforeInsertHooks, teamHook)
	case boil.AfterInsertHook:
		teamAfterInsertHooks = append(teamAfterInsertHooks, teamHook)
	case boil.BeforeUpdateHook:
		teamBeforeUpdateHooks = append(teamBeforeUpdateHooks, teamHook)
	case boil.AfterUpdateHook:
		teamAfterUpdateHooks = append(teamAfterUpdateHooks, teamHook)
	case boil.BeforeDeleteHook:
		teamBeforeDeleteHooks = append(teamBeforeDeleteHooks, teamHook)
	case boil.AfterDeleteHook:
		teamAfterDeleteHooks = append(teamAfterDeleteHooks, teamHook)
	case boil.BeforeUpsertHook:
		teamBeforeUpsertHooks = append(teamBeforeUpsertHooks, teamHook)
	case boil.AfterUpsertHook:
		teamAfterUpsertHooks = append(teamAfterUpsertHooks, teamHook)
	}
}

// One returns a single team record from the query.
func (q teamQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Team, error) {
	o := &Team{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for teams")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Team records from the query.
func (q teamQuery) All(ctx context.Context, exec boil.ContextExecutor) (TeamSlice, error) {
	var o []*Team

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Team slice")
	}

	if len(teamAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Team records in the query.
func (q teamQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count teams rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q teamQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if teams exists")
	}

	return count > 0, nil
}

// Bracket pointed to by the foreign key.
func (o *Team) Bracket(mods ...qm.QueryMod) bracketQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BracketID),
	}

	queryMods = append(queryMods, mods...)

	return Brackets(queryMods...)
}

// FirstTeamMatches retrieves all the match's Matches with an executor via first_team column.
func (o *Team) FirstTeamMatches(mods ...qm.QueryMod) matchQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"matches\".\"first_team\"=?", o.ID),
	)

	return Matches(queryMods...)
}

// SecondTeamMatches retrieves all the match's Matches with an executor via second_team column.
func (o *Team) SecondTeamMatches(mods ...qm.QueryMod) matchQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"matches\".\"second_team\"=?", o.ID),
	)

	return Matches(queryMods...)
}

// WinnerMatches retrieves all the match's Matches with an executor via winner column.
func (o *Team) WinnerMatches(mods ...qm.QueryMod) matchQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"matches\".\"winner\"=?", o.ID),
	)

	return Matches(queryMods...)
}

// Participants retrieves all the participant's Participants with an executor.
func (o *Team) Participants(mods ...qm.QueryMod) participantQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"participants\".\"team_id\"=?", o.ID),
	)

	return Participants(queryMods...)
}

// LoadBracket allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (teamL) LoadBracket(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTeam interface{}, mods queries.Applicator) error {
	var slice []*Team
	var object *Team

	if singular {
		var ok bool
		object, ok = maybeTeam.(*Team)
		if !ok {
			object = new(Team)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTeam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTeam))
			}
		}
	} else {
		s, ok := maybeTeam.(*[]*Team)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTeam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTeam))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &teamR{}
		}
		if !queries.IsNil(object.BracketID) {
			args = append(args, object.BracketID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BracketID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BracketID) {
				args = append(args, obj.BracketID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`brackets`),
		qm.WhereIn(`brackets.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Bracket")
	}

	var resultSlice []*Bracket
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Bracket")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for brackets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for brackets")
	}

	if len(bracketAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Bracket = foreign
		if foreign.R == nil {
			foreign.R = &bracketR{}
		}
		foreign.R.Teams = append(foreign.R.Teams, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BracketID, foreign.ID) {
				local.R.Bracket = foreign
				if foreign.R == nil {
					foreign.R = &bracketR{}
				}
				foreign.R.Teams = append(foreign.R.Teams, local)
				break
			}
		}
	}

	return nil
}

// LoadFirstTeamMatches allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (teamL) LoadFirstTeamMatches(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTeam interface{}, mods queries.Applicator) error {
	var slice []*Team
	var object *Team

	if singular {
		var ok bool
		object, ok = maybeTeam.(*Team)
		if !ok {
			object = new(Team)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTeam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTeam))
			}
		}
	} else {
		s, ok := maybeTeam.(*[]*Team)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTeam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTeam))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &teamR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`matches`),
		qm.WhereIn(`matches.first_team in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load matches")
	}

	var resultSlice []*Match
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice matches")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on matches")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for matches")
	}

	if len(matchAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FirstTeamMatches = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &matchR{}
			}
			foreign.R.FirstTeamTeam = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.FirstTeam) {
				local.R.FirstTeamMatches = append(local.R.FirstTeamMatches, foreign)
				if foreign.R == nil {
					foreign.R = &matchR{}
				}
				foreign.R.FirstTeamTeam = local
				break
			}
		}
	}

	return nil
}

// LoadSecondTeamMatches allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (teamL) LoadSecondTeamMatches(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTeam interface{}, mods queries.Applicator) error {
	var slice []*Team
	var object *Team

	if singular {
		var ok bool
		object, ok = maybeTeam.(*Team)
		if !ok {
			object = new(Team)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTeam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTeam))
			}
		}
	} else {
		s, ok := maybeTeam.(*[]*Team)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTeam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTeam))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &teamR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`matches`),
		qm.WhereIn(`matches.second_team in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load matches")
	}

	var resultSlice []*Match
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice matches")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on matches")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for matches")
	}

	if len(matchAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SecondTeamMatches = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &matchR{}
			}
			foreign.R.SecondTeamTeam = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SecondTeam) {
				local.R.SecondTeamMatches = append(local.R.SecondTeamMatches, foreign)
				if foreign.R == nil {
					foreign.R = &matchR{}
				}
				foreign.R.SecondTeamTeam = local
				break
			}
		}
	}

	return nil
}

// LoadWinnerMatches allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (teamL) LoadWinnerMatches(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTeam interface{}, mods queries.Applicator) error {
	var slice []*Team
	var object *Team

	if singular {
		var ok bool
		object, ok = maybeTeam.(*Team)
		if !ok {
			object = new(Team)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTeam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTeam))
			}
		}
	} else {
		s, ok := maybeTeam.(*[]*Team)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTeam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTeam))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &teamR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`matches`),
		qm.WhereIn(`matches.winner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load matches")
	}

	var resultSlice []*Match
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice matches")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on matches")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for matches")
	}

	if len(matchAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.WinnerMatches = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &matchR{}
			}
			foreign.R.WinnerTeam = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Winner) {
				local.R.WinnerMatches = append(local.R.WinnerMatches, foreign)
				if foreign.R == nil {
					foreign.R = &matchR{}
				}
				foreign.R.WinnerTeam = local
				break
			}
		}
	}

	return nil
}

// LoadParticipants allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (teamL) LoadParticipants(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTeam interface{}, mods queries.Applicator) error {
	var slice []*Team
	var object *Team

	if singular {
		var ok bool
		object, ok = maybeTeam.(*Team)
		if !ok {
			object = new(Team)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTeam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTeam))
			}
		}
	} else {
		s, ok := maybeTeam.(*[]*Team)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTeam)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTeam))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &teamR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`participants`),
		qm.WhereIn(`participants.team_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load participants")
	}

	var resultSlice []*Participant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice participants")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on participants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for participants")
	}

	if len(participantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Participants = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &participantR{}
			}
			foreign.R.Team = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.TeamID) {
				local.R.Participants = append(local.R.Participants, foreign)
				if foreign.R == nil {
					foreign.R = &participantR{}
				}
				foreign.R.Team = local
				break
			}
		}
	}

	return nil
}

// SetBracket of the team to the related item.
// Sets o.R.Bracket to related.
// Adds o to related.R.Teams.
func (o *Team) SetBracket(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Bracket) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"teams\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"bracket_id"}),
		strmangle.WhereClause("\"", "\"", 2, teamPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BracketID, related.ID)
	if o.R == nil {
		o.R = &teamR{
			Bracket: related,
		}
	} else {
		o.R.Bracket = related
	}

	if related.R == nil {
		related.R = &bracketR{
			Teams: TeamSlice{o},
		}
	} else {
		related.R.Teams = append(related.R.Teams, o)
	}

	return nil
}

// RemoveBracket relationship.
// Sets o.R.Bracket to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Team) RemoveBracket(ctx context.Context, exec boil.ContextExecutor, related *Bracket) error {
	var err error

	queries.SetScanner(&o.BracketID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("bracket_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Bracket = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Teams {
		if queries.Equal(o.BracketID, ri.BracketID) {
			continue
		}

		ln := len(related.R.Teams)
		if ln > 1 && i < ln-1 {
			related.R.Teams[i] = related.R.Teams[ln-1]
		}
		related.R.Teams = related.R.Teams[:ln-1]
		break
	}
	return nil
}

// AddFirstTeamMatches adds the given related objects to the existing relationships
// of the team, optionally inserting them as new records.
// Appends related to o.R.FirstTeamMatches.
// Sets related.R.FirstTeamTeam appropriately.
func (o *Team) AddFirstTeamMatches(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Match) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.FirstTeam, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"matches\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"first_team"}),
				strmangle.WhereClause("\"", "\"", 2, matchPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.FirstTeam, o.ID)
		}
	}

	if o.R == nil {
		o.R = &teamR{
			FirstTeamMatches: related,
		}
	} else {
		o.R.FirstTeamMatches = append(o.R.FirstTeamMatches, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &matchR{
				FirstTeamTeam: o,
			}
		} else {
			rel.R.FirstTeamTeam = o
		}
	}
	return nil
}

// SetFirstTeamMatches removes all previously related items of the
// team replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.FirstTeamTeam's FirstTeamMatches accordingly.
// Replaces o.R.FirstTeamMatches with related.
// Sets related.R.FirstTeamTeam's FirstTeamMatches accordingly.
func (o *Team) SetFirstTeamMatches(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Match) error {
	query := "update \"matches\" set \"first_team\" = null where \"first_team\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.FirstTeamMatches {
			queries.SetScanner(&rel.FirstTeam, nil)
			if rel.R == nil {
				continue
			}

			rel.R.FirstTeamTeam = nil
		}
		o.R.FirstTeamMatches = nil
	}

	return o.AddFirstTeamMatches(ctx, exec, insert, related...)
}

// RemoveFirstTeamMatches relationships from objects passed in.
// Removes related items from R.FirstTeamMatches (uses pointer comparison, removal does not keep order)
// Sets related.R.FirstTeamTeam.
func (o *Team) RemoveFirstTeamMatches(ctx context.Context, exec boil.ContextExecutor, related ...*Match) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.FirstTeam, nil)
		if rel.R != nil {
			rel.R.FirstTeamTeam = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("first_team")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.FirstTeamMatches {
			if rel != ri {
				continue
			}

			ln := len(o.R.FirstTeamMatches)
			if ln > 1 && i < ln-1 {
				o.R.FirstTeamMatches[i] = o.R.FirstTeamMatches[ln-1]
			}
			o.R.FirstTeamMatches = o.R.FirstTeamMatches[:ln-1]
			break
		}
	}

	return nil
}

// AddSecondTeamMatches adds the given related objects to the existing relationships
// of the team, optionally inserting them as new records.
// Appends related to o.R.SecondTeamMatches.
// Sets related.R.SecondTeamTeam appropriately.
func (o *Team) AddSecondTeamMatches(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Match) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SecondTeam, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"matches\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"second_team"}),
				strmangle.WhereClause("\"", "\"", 2, matchPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SecondTeam, o.ID)
		}
	}

	if o.R == nil {
		o.R = &teamR{
			SecondTeamMatches: related,
		}
	} else {
		o.R.SecondTeamMatches = append(o.R.SecondTeamMatches, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &matchR{
				SecondTeamTeam: o,
			}
		} else {
			rel.R.SecondTeamTeam = o
		}
	}
	return nil
}

// SetSecondTeamMatches removes all previously related items of the
// team replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SecondTeamTeam's SecondTeamMatches accordingly.
// Replaces o.R.SecondTeamMatches with related.
// Sets related.R.SecondTeamTeam's SecondTeamMatches accordingly.
func (o *Team) SetSecondTeamMatches(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Match) error {
	query := "update \"matches\" set \"second_team\" = null where \"second_team\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.SecondTeamMatches {
			queries.SetScanner(&rel.SecondTeam, nil)
			if rel.R == nil {
				continue
			}

			rel.R.SecondTeamTeam = nil
		}
		o.R.SecondTeamMatches = nil
	}

	return o.AddSecondTeamMatches(ctx, exec, insert, related...)
}

// RemoveSecondTeamMatches relationships from objects passed in.
// Removes related items from R.SecondTeamMatches (uses pointer comparison, removal does not keep order)
// Sets related.R.SecondTeamTeam.
func (o *Team) RemoveSecondTeamMatches(ctx context.Context, exec boil.ContextExecutor, related ...*Match) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SecondTeam, nil)
		if rel.R != nil {
			rel.R.SecondTeamTeam = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("second_team")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SecondTeamMatches {
			if rel != ri {
				continue
			}

			ln := len(o.R.SecondTeamMatches)
			if ln > 1 && i < ln-1 {
				o.R.SecondTeamMatches[i] = o.R.SecondTeamMatches[ln-1]
			}
			o.R.SecondTeamMatches = o.R.SecondTeamMatches[:ln-1]
			break
		}
	}

	return nil
}

// AddWinnerMatches adds the given related objects to the existing relationships
// of the team, optionally inserting them as new records.
// Appends related to o.R.WinnerMatches.
// Sets related.R.WinnerTeam appropriately.
func (o *Team) AddWinnerMatches(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Match) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Winner, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"matches\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"winner"}),
				strmangle.WhereClause("\"", "\"", 2, matchPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Winner, o.ID)
		}
	}

	if o.R == nil {
		o.R = &teamR{
			WinnerMatches: related,
		}
	} else {
		o.R.WinnerMatches = append(o.R.WinnerMatches, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &matchR{
				WinnerTeam: o,
			}
		} else {
			rel.R.WinnerTeam = o
		}
	}
	return nil
}

// SetWinnerMatches removes all previously related items of the
// team replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.WinnerTeam's WinnerMatches accordingly.
// Replaces o.R.WinnerMatches with related.
// Sets related.R.WinnerTeam's WinnerMatches accordingly.
func (o *Team) SetWinnerMatches(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Match) error {
	query := "update \"matches\" set \"winner\" = null where \"winner\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.WinnerMatches {
			queries.SetScanner(&rel.Winner, nil)
			if rel.R == nil {
				continue
			}

			rel.R.WinnerTeam = nil
		}
		o.R.WinnerMatches = nil
	}

	return o.AddWinnerMatches(ctx, exec, insert, related...)
}

// RemoveWinnerMatches relationships from objects passed in.
// Removes related items from R.WinnerMatches (uses pointer comparison, removal does not keep order)
// Sets related.R.WinnerTeam.
func (o *Team) RemoveWinnerMatches(ctx context.Context, exec boil.ContextExecutor, related ...*Match) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Winner, nil)
		if rel.R != nil {
			rel.R.WinnerTeam = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("winner")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.WinnerMatches {
			if rel != ri {
				continue
			}

			ln := len(o.R.WinnerMatches)
			if ln > 1 && i < ln-1 {
				o.R.WinnerMatches[i] = o.R.WinnerMatches[ln-1]
			}
			o.R.WinnerMatches = o.R.WinnerMatches[:ln-1]
			break
		}
	}

	return nil
}

// AddParticipants adds the given related objects to the existing relationships
// of the team, optionally inserting them as new records.
// Appends related to o.R.Participants.
// Sets related.R.Team appropriately.
func (o *Team) AddParticipants(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Participant) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TeamID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"participants\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"team_id"}),
				strmangle.WhereClause("\"", "\"", 2, participantPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TeamID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &teamR{
			Participants: related,
		}
	} else {
		o.R.Participants = append(o.R.Participants, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &participantR{
				Team: o,
			}
		} else {
			rel.R.Team = o
		}
	}
	return nil
}

// SetParticipants removes all previously related items of the
// team replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Team's Participants accordingly.
// Replaces o.R.Participants with related.
// Sets related.R.Team's Participants accordingly.
func (o *Team) SetParticipants(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Participant) error {
	query := "update \"participants\" set \"team_id\" = null where \"team_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Participants {
			queries.SetScanner(&rel.TeamID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Team = nil
		}
		o.R.Participants = nil
	}

	return o.AddParticipants(ctx, exec, insert, related...)
}

// RemoveParticipants relationships from objects passed in.
// Removes related items from R.Participants (uses pointer comparison, removal does not keep order)
// Sets related.R.Team.
func (o *Team) RemoveParticipants(ctx context.Context, exec boil.ContextExecutor, related ...*Participant) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TeamID, nil)
		if rel.R != nil {
			rel.R.Team = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("team_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Participants {
			if rel != ri {
				continue
			}

			ln := len(o.R.Participants)
			if ln > 1 && i < ln-1 {
				o.R.Participants[i] = o.R.Participants[ln-1]
			}
			o.R.Participants = o.R.Participants[:ln-1]
			break
		}
	}

	return nil
}

// Teams retrieves all the records using an executor.
func Teams(mods ...qm.QueryMod) teamQuery {
	mods = append(mods, qm.From("\"teams\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"teams\".*"})
	}

	return teamQuery{q}
}

// FindTeam retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTeam(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Team, error) {
	teamObj := &Team{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"teams\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, teamObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from teams")
	}

	if err = teamObj.doAfterSelectHooks(ctx, exec); err != nil {
		return teamObj, err
	}

	return teamObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Team) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no teams provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(teamColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	teamInsertCacheMut.RLock()
	cache, cached := teamInsertCache[key]
	teamInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			teamAllColumns,
			teamColumnsWithDefault,
			teamColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, teamGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(teamType, teamMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(teamType, teamMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"teams\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"teams\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into teams")
	}

	if !cached {
		teamInsertCacheMut.Lock()
		teamInsertCache[key] = cache
		teamInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Team.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Team) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	teamUpdateCacheMut.RLock()
	cache, cached := teamUpdateCache[key]
	teamUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			teamAllColumns,
			teamPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, teamGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update teams, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"teams\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, teamPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(teamType, teamMapping, append(wl, teamPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update teams row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for teams")
	}

	if !cached {
		teamUpdateCacheMut.Lock()
		teamUpdateCache[key] = cache
		teamUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q teamQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for teams")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for teams")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TeamSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teamPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"teams\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, teamPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in team slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all team")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Team) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no teams provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(teamColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	teamUpsertCacheMut.RLock()
	cache, cached := teamUpsertCache[key]
	teamUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			teamAllColumns,
			teamColumnsWithDefault,
			teamColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			teamAllColumns,
			teamPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, teamGeneratedColumns)
		update = strmangle.SetComplement(update, teamGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert teams, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(teamPrimaryKeyColumns))
			copy(conflict, teamPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"teams\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(teamType, teamMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(teamType, teamMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert teams")
	}

	if !cached {
		teamUpsertCacheMut.Lock()
		teamUpsertCache[key] = cache
		teamUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Team record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Team) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no Team provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), teamPrimaryKeyMapping)
	sql := "DELETE FROM \"teams\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from teams")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for teams")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q teamQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no teamQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from teams")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for teams")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TeamSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(teamBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teamPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"teams\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, teamPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from team slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for teams")
	}

	if len(teamAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Team) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTeam(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TeamSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TeamSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teamPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"teams\".* FROM \"teams\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, teamPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in TeamSlice")
	}

	*o = slice

	return nil
}

// TeamExists checks if the Team row exists.
func TeamExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"teams\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if teams exists")
	}

	return exists, nil
}

// Exists checks if the Team row exists.
func (o *Team) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TeamExists(ctx, exec, o.ID)
}
