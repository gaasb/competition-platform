// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBrackets(t *testing.T) {
	t.Parallel()

	query := Brackets()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBracketsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bracket{}
	if err = randomize.Struct(seed, o, bracketDBTypes, true, bracketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bracket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Brackets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBracketsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bracket{}
	if err = randomize.Struct(seed, o, bracketDBTypes, true, bracketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bracket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Brackets().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Brackets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBracketsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bracket{}
	if err = randomize.Struct(seed, o, bracketDBTypes, true, bracketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bracket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BracketSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Brackets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBracketsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bracket{}
	if err = randomize.Struct(seed, o, bracketDBTypes, true, bracketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bracket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BracketExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Bracket exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BracketExists to return true, but got false.")
	}
}

func testBracketsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bracket{}
	if err = randomize.Struct(seed, o, bracketDBTypes, true, bracketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bracket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	bracketFound, err := FindBracket(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if bracketFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBracketsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bracket{}
	if err = randomize.Struct(seed, o, bracketDBTypes, true, bracketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bracket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Brackets().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBracketsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bracket{}
	if err = randomize.Struct(seed, o, bracketDBTypes, true, bracketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bracket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Brackets().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBracketsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bracketOne := &Bracket{}
	bracketTwo := &Bracket{}
	if err = randomize.Struct(seed, bracketOne, bracketDBTypes, false, bracketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bracket struct: %s", err)
	}
	if err = randomize.Struct(seed, bracketTwo, bracketDBTypes, false, bracketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bracket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = bracketOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = bracketTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Brackets().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBracketsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	bracketOne := &Bracket{}
	bracketTwo := &Bracket{}
	if err = randomize.Struct(seed, bracketOne, bracketDBTypes, false, bracketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bracket struct: %s", err)
	}
	if err = randomize.Struct(seed, bracketTwo, bracketDBTypes, false, bracketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bracket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = bracketOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = bracketTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Brackets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func bracketBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Bracket) error {
	*o = Bracket{}
	return nil
}

func bracketAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Bracket) error {
	*o = Bracket{}
	return nil
}

func bracketAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Bracket) error {
	*o = Bracket{}
	return nil
}

func bracketBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Bracket) error {
	*o = Bracket{}
	return nil
}

func bracketAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Bracket) error {
	*o = Bracket{}
	return nil
}

func bracketBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Bracket) error {
	*o = Bracket{}
	return nil
}

func bracketAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Bracket) error {
	*o = Bracket{}
	return nil
}

func bracketBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Bracket) error {
	*o = Bracket{}
	return nil
}

func bracketAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Bracket) error {
	*o = Bracket{}
	return nil
}

func testBracketsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Bracket{}
	o := &Bracket{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, bracketDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Bracket object: %s", err)
	}

	AddBracketHook(boil.BeforeInsertHook, bracketBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	bracketBeforeInsertHooks = []BracketHook{}

	AddBracketHook(boil.AfterInsertHook, bracketAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	bracketAfterInsertHooks = []BracketHook{}

	AddBracketHook(boil.AfterSelectHook, bracketAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	bracketAfterSelectHooks = []BracketHook{}

	AddBracketHook(boil.BeforeUpdateHook, bracketBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	bracketBeforeUpdateHooks = []BracketHook{}

	AddBracketHook(boil.AfterUpdateHook, bracketAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	bracketAfterUpdateHooks = []BracketHook{}

	AddBracketHook(boil.BeforeDeleteHook, bracketBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	bracketBeforeDeleteHooks = []BracketHook{}

	AddBracketHook(boil.AfterDeleteHook, bracketAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	bracketAfterDeleteHooks = []BracketHook{}

	AddBracketHook(boil.BeforeUpsertHook, bracketBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	bracketBeforeUpsertHooks = []BracketHook{}

	AddBracketHook(boil.AfterUpsertHook, bracketAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	bracketAfterUpsertHooks = []BracketHook{}
}

func testBracketsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bracket{}
	if err = randomize.Struct(seed, o, bracketDBTypes, true, bracketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bracket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Brackets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBracketsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bracket{}
	if err = randomize.Struct(seed, o, bracketDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Bracket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(bracketColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Brackets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBracketToManyMatches(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Bracket
	var b, c Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bracketDBTypes, true, bracketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bracket struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, matchDBTypes, false, matchColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matchDBTypes, false, matchColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.BracketID, a.ID)
	queries.Assign(&c.BracketID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Matches().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.BracketID, b.BracketID) {
			bFound = true
		}
		if queries.Equal(v.BracketID, c.BracketID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := BracketSlice{&a}
	if err = a.L.LoadMatches(ctx, tx, false, (*[]*Bracket)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Matches); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Matches = nil
	if err = a.L.LoadMatches(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Matches); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testBracketToManyTeams(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Bracket
	var b, c Team

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bracketDBTypes, true, bracketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bracket struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, teamDBTypes, false, teamColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, teamDBTypes, false, teamColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.BracketID, a.ID)
	queries.Assign(&c.BracketID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Teams().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.BracketID, b.BracketID) {
			bFound = true
		}
		if queries.Equal(v.BracketID, c.BracketID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := BracketSlice{&a}
	if err = a.L.LoadTeams(ctx, tx, false, (*[]*Bracket)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Teams); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Teams = nil
	if err = a.L.LoadTeams(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Teams); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testBracketToManyAddOpMatches(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Bracket
	var b, c, d, e Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bracketDBTypes, false, strmangle.SetComplement(bracketPrimaryKeyColumns, bracketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Match{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Match{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMatches(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.BracketID) {
			t.Error("foreign key was wrong value", a.ID, first.BracketID)
		}
		if !queries.Equal(a.ID, second.BracketID) {
			t.Error("foreign key was wrong value", a.ID, second.BracketID)
		}

		if first.R.Bracket != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Bracket != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Matches[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Matches[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Matches().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testBracketToManySetOpMatches(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Bracket
	var b, c, d, e Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bracketDBTypes, false, strmangle.SetComplement(bracketPrimaryKeyColumns, bracketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Match{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetMatches(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Matches().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetMatches(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Matches().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.BracketID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.BracketID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.BracketID) {
		t.Error("foreign key was wrong value", a.ID, d.BracketID)
	}
	if !queries.Equal(a.ID, e.BracketID) {
		t.Error("foreign key was wrong value", a.ID, e.BracketID)
	}

	if b.R.Bracket != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Bracket != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Bracket != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Bracket != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Matches[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Matches[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testBracketToManyRemoveOpMatches(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Bracket
	var b, c, d, e Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bracketDBTypes, false, strmangle.SetComplement(bracketPrimaryKeyColumns, bracketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Match{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddMatches(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Matches().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveMatches(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Matches().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.BracketID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.BracketID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Bracket != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Bracket != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Bracket != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Bracket != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Matches) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Matches[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Matches[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testBracketToManyAddOpTeams(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Bracket
	var b, c, d, e Team

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bracketDBTypes, false, strmangle.SetComplement(bracketPrimaryKeyColumns, bracketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Team{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Team{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTeams(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.BracketID) {
			t.Error("foreign key was wrong value", a.ID, first.BracketID)
		}
		if !queries.Equal(a.ID, second.BracketID) {
			t.Error("foreign key was wrong value", a.ID, second.BracketID)
		}

		if first.R.Bracket != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Bracket != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Teams[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Teams[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Teams().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testBracketToManySetOpTeams(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Bracket
	var b, c, d, e Team

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bracketDBTypes, false, strmangle.SetComplement(bracketPrimaryKeyColumns, bracketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Team{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetTeams(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Teams().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetTeams(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Teams().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.BracketID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.BracketID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.BracketID) {
		t.Error("foreign key was wrong value", a.ID, d.BracketID)
	}
	if !queries.Equal(a.ID, e.BracketID) {
		t.Error("foreign key was wrong value", a.ID, e.BracketID)
	}

	if b.R.Bracket != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Bracket != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Bracket != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Bracket != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Teams[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Teams[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testBracketToManyRemoveOpTeams(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Bracket
	var b, c, d, e Team

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bracketDBTypes, false, strmangle.SetComplement(bracketPrimaryKeyColumns, bracketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Team{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddTeams(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Teams().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveTeams(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Teams().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.BracketID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.BracketID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Bracket != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Bracket != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Bracket != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Bracket != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Teams) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Teams[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Teams[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testBracketToOneTournamentUsingTournament(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Bracket
	var foreign Tournament

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, bracketDBTypes, true, bracketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bracket struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, tournamentDBTypes, false, tournamentColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Tournament struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.TournamentID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Tournament().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddTournamentHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Tournament) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := BracketSlice{&local}
	if err = local.L.LoadTournament(ctx, tx, false, (*[]*Bracket)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Tournament == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Tournament = nil
	if err = local.L.LoadTournament(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Tournament == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testBracketToOneSetOpTournamentUsingTournament(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Bracket
	var b, c Tournament

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bracketDBTypes, false, strmangle.SetComplement(bracketPrimaryKeyColumns, bracketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, tournamentDBTypes, false, strmangle.SetComplement(tournamentPrimaryKeyColumns, tournamentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tournamentDBTypes, false, strmangle.SetComplement(tournamentPrimaryKeyColumns, tournamentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Tournament{&b, &c} {
		err = a.SetTournament(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Tournament != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Brackets[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.TournamentID, x.ID) {
			t.Error("foreign key was wrong value", a.TournamentID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TournamentID))
		reflect.Indirect(reflect.ValueOf(&a.TournamentID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.TournamentID, x.ID) {
			t.Error("foreign key was wrong value", a.TournamentID, x.ID)
		}
	}
}

func testBracketToOneRemoveOpTournamentUsingTournament(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Bracket
	var b Tournament

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, bracketDBTypes, false, strmangle.SetComplement(bracketPrimaryKeyColumns, bracketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, tournamentDBTypes, false, strmangle.SetComplement(tournamentPrimaryKeyColumns, tournamentColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetTournament(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveTournament(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Tournament().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Tournament != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.TournamentID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Brackets) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testBracketsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bracket{}
	if err = randomize.Struct(seed, o, bracketDBTypes, true, bracketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bracket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBracketsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bracket{}
	if err = randomize.Struct(seed, o, bracketDBTypes, true, bracketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bracket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BracketSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBracketsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bracket{}
	if err = randomize.Struct(seed, o, bracketDBTypes, true, bracketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bracket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Brackets().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	bracketDBTypes = map[string]string{`ID`: `uuid`, `TypeOf`: `enum.bracket_type('SINGLE_ELIMINATION','DOUBLE_ELIMINATION','ROUND_ROBIN')`, `MaxTeams`: `integer`, `MaxTeamParticipants`: `integer`, `TournamentID`: `uuid`, `PlayoffRounds`: `integer`, `FinalRounds`: `integer`, `GrandFinalRounds`: `integer`, `Status`: `enum.bracket_status('pending','live','finished')`}
	_              = bytes.MinRead
)

func testBracketsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(bracketPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(bracketAllColumns) == len(bracketPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Bracket{}
	if err = randomize.Struct(seed, o, bracketDBTypes, true, bracketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bracket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Brackets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, bracketDBTypes, true, bracketPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Bracket struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBracketsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(bracketAllColumns) == len(bracketPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Bracket{}
	if err = randomize.Struct(seed, o, bracketDBTypes, true, bracketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bracket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Brackets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, bracketDBTypes, true, bracketPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Bracket struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(bracketAllColumns, bracketPrimaryKeyColumns) {
		fields = bracketAllColumns
	} else {
		fields = strmangle.SetComplement(
			bracketAllColumns,
			bracketPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BracketSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBracketsUpsert(t *testing.T) {
	t.Parallel()

	if len(bracketAllColumns) == len(bracketPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Bracket{}
	if err = randomize.Struct(seed, &o, bracketDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Bracket struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Bracket: %s", err)
	}

	count, err := Brackets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, bracketDBTypes, false, bracketPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Bracket struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Bracket: %s", err)
	}

	count, err = Brackets().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
