// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTeams(t *testing.T) {
	t.Parallel()

	query := Teams()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTeamsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Team{}
	if err = randomize.Struct(seed, o, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Teams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTeamsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Team{}
	if err = randomize.Struct(seed, o, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Teams().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Teams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTeamsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Team{}
	if err = randomize.Struct(seed, o, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TeamSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Teams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTeamsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Team{}
	if err = randomize.Struct(seed, o, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TeamExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Team exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TeamExists to return true, but got false.")
	}
}

func testTeamsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Team{}
	if err = randomize.Struct(seed, o, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	teamFound, err := FindTeam(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if teamFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTeamsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Team{}
	if err = randomize.Struct(seed, o, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Teams().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testTeamsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Team{}
	if err = randomize.Struct(seed, o, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Teams().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTeamsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	teamOne := &Team{}
	teamTwo := &Team{}
	if err = randomize.Struct(seed, teamOne, teamDBTypes, false, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}
	if err = randomize.Struct(seed, teamTwo, teamDBTypes, false, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = teamOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = teamTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Teams().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTeamsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	teamOne := &Team{}
	teamTwo := &Team{}
	if err = randomize.Struct(seed, teamOne, teamDBTypes, false, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}
	if err = randomize.Struct(seed, teamTwo, teamDBTypes, false, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = teamOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = teamTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Teams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func teamBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Team) error {
	*o = Team{}
	return nil
}

func teamAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Team) error {
	*o = Team{}
	return nil
}

func teamAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Team) error {
	*o = Team{}
	return nil
}

func teamBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Team) error {
	*o = Team{}
	return nil
}

func teamAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Team) error {
	*o = Team{}
	return nil
}

func teamBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Team) error {
	*o = Team{}
	return nil
}

func teamAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Team) error {
	*o = Team{}
	return nil
}

func teamBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Team) error {
	*o = Team{}
	return nil
}

func teamAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Team) error {
	*o = Team{}
	return nil
}

func testTeamsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Team{}
	o := &Team{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, teamDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Team object: %s", err)
	}

	AddTeamHook(boil.BeforeInsertHook, teamBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	teamBeforeInsertHooks = []TeamHook{}

	AddTeamHook(boil.AfterInsertHook, teamAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	teamAfterInsertHooks = []TeamHook{}

	AddTeamHook(boil.AfterSelectHook, teamAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	teamAfterSelectHooks = []TeamHook{}

	AddTeamHook(boil.BeforeUpdateHook, teamBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	teamBeforeUpdateHooks = []TeamHook{}

	AddTeamHook(boil.AfterUpdateHook, teamAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	teamAfterUpdateHooks = []TeamHook{}

	AddTeamHook(boil.BeforeDeleteHook, teamBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	teamBeforeDeleteHooks = []TeamHook{}

	AddTeamHook(boil.AfterDeleteHook, teamAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	teamAfterDeleteHooks = []TeamHook{}

	AddTeamHook(boil.BeforeUpsertHook, teamBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	teamBeforeUpsertHooks = []TeamHook{}

	AddTeamHook(boil.AfterUpsertHook, teamAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	teamAfterUpsertHooks = []TeamHook{}
}

func testTeamsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Team{}
	if err = randomize.Struct(seed, o, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Teams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTeamsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Team{}
	if err = randomize.Struct(seed, o, teamDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(teamColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Teams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTeamToManyFirstTeamMatches(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, matchDBTypes, false, matchColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matchDBTypes, false, matchColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.FirstTeam, a.ID)
	queries.Assign(&c.FirstTeam, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.FirstTeamMatches().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.FirstTeam, b.FirstTeam) {
			bFound = true
		}
		if queries.Equal(v.FirstTeam, c.FirstTeam) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TeamSlice{&a}
	if err = a.L.LoadFirstTeamMatches(ctx, tx, false, (*[]*Team)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FirstTeamMatches); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.FirstTeamMatches = nil
	if err = a.L.LoadFirstTeamMatches(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FirstTeamMatches); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTeamToManySecondTeamMatches(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, matchDBTypes, false, matchColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matchDBTypes, false, matchColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.SecondTeam, a.ID)
	queries.Assign(&c.SecondTeam, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SecondTeamMatches().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.SecondTeam, b.SecondTeam) {
			bFound = true
		}
		if queries.Equal(v.SecondTeam, c.SecondTeam) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TeamSlice{&a}
	if err = a.L.LoadSecondTeamMatches(ctx, tx, false, (*[]*Team)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SecondTeamMatches); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SecondTeamMatches = nil
	if err = a.L.LoadSecondTeamMatches(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SecondTeamMatches); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTeamToManyWinnerMatches(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, matchDBTypes, false, matchColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, matchDBTypes, false, matchColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Winner, a.ID)
	queries.Assign(&c.Winner, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.WinnerMatches().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Winner, b.Winner) {
			bFound = true
		}
		if queries.Equal(v.Winner, c.Winner) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TeamSlice{&a}
	if err = a.L.LoadWinnerMatches(ctx, tx, false, (*[]*Team)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.WinnerMatches); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.WinnerMatches = nil
	if err = a.L.LoadWinnerMatches(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.WinnerMatches); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTeamToManyParticipants(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c Participant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, participantDBTypes, false, participantColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, participantDBTypes, false, participantColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.TeamID, a.ID)
	queries.Assign(&c.TeamID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Participants().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.TeamID, b.TeamID) {
			bFound = true
		}
		if queries.Equal(v.TeamID, c.TeamID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TeamSlice{&a}
	if err = a.L.LoadParticipants(ctx, tx, false, (*[]*Team)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Participants); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Participants = nil
	if err = a.L.LoadParticipants(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Participants); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTeamToManyAddOpFirstTeamMatches(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Match{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Match{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddFirstTeamMatches(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.FirstTeam) {
			t.Error("foreign key was wrong value", a.ID, first.FirstTeam)
		}
		if !queries.Equal(a.ID, second.FirstTeam) {
			t.Error("foreign key was wrong value", a.ID, second.FirstTeam)
		}

		if first.R.FirstTeamTeam != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.FirstTeamTeam != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.FirstTeamMatches[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.FirstTeamMatches[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.FirstTeamMatches().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTeamToManySetOpFirstTeamMatches(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Match{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetFirstTeamMatches(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.FirstTeamMatches().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetFirstTeamMatches(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.FirstTeamMatches().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.FirstTeam) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.FirstTeam) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.FirstTeam) {
		t.Error("foreign key was wrong value", a.ID, d.FirstTeam)
	}
	if !queries.Equal(a.ID, e.FirstTeam) {
		t.Error("foreign key was wrong value", a.ID, e.FirstTeam)
	}

	if b.R.FirstTeamTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.FirstTeamTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.FirstTeamTeam != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.FirstTeamTeam != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.FirstTeamMatches[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.FirstTeamMatches[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testTeamToManyRemoveOpFirstTeamMatches(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Match{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddFirstTeamMatches(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.FirstTeamMatches().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveFirstTeamMatches(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.FirstTeamMatches().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.FirstTeam) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.FirstTeam) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.FirstTeamTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.FirstTeamTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.FirstTeamTeam != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.FirstTeamTeam != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.FirstTeamMatches) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.FirstTeamMatches[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.FirstTeamMatches[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testTeamToManyAddOpSecondTeamMatches(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Match{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Match{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSecondTeamMatches(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.SecondTeam) {
			t.Error("foreign key was wrong value", a.ID, first.SecondTeam)
		}
		if !queries.Equal(a.ID, second.SecondTeam) {
			t.Error("foreign key was wrong value", a.ID, second.SecondTeam)
		}

		if first.R.SecondTeamTeam != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.SecondTeamTeam != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SecondTeamMatches[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SecondTeamMatches[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SecondTeamMatches().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTeamToManySetOpSecondTeamMatches(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Match{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetSecondTeamMatches(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.SecondTeamMatches().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetSecondTeamMatches(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.SecondTeamMatches().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SecondTeam) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SecondTeam) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.SecondTeam) {
		t.Error("foreign key was wrong value", a.ID, d.SecondTeam)
	}
	if !queries.Equal(a.ID, e.SecondTeam) {
		t.Error("foreign key was wrong value", a.ID, e.SecondTeam)
	}

	if b.R.SecondTeamTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.SecondTeamTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.SecondTeamTeam != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.SecondTeamTeam != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.SecondTeamMatches[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.SecondTeamMatches[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testTeamToManyRemoveOpSecondTeamMatches(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Match{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddSecondTeamMatches(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.SecondTeamMatches().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveSecondTeamMatches(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.SecondTeamMatches().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SecondTeam) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SecondTeam) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.SecondTeamTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.SecondTeamTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.SecondTeamTeam != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.SecondTeamTeam != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.SecondTeamMatches) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.SecondTeamMatches[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.SecondTeamMatches[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testTeamToManyAddOpWinnerMatches(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Match{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Match{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddWinnerMatches(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Winner) {
			t.Error("foreign key was wrong value", a.ID, first.Winner)
		}
		if !queries.Equal(a.ID, second.Winner) {
			t.Error("foreign key was wrong value", a.ID, second.Winner)
		}

		if first.R.WinnerTeam != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.WinnerTeam != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.WinnerMatches[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.WinnerMatches[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.WinnerMatches().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTeamToManySetOpWinnerMatches(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Match{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetWinnerMatches(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.WinnerMatches().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetWinnerMatches(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.WinnerMatches().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Winner) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Winner) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Winner) {
		t.Error("foreign key was wrong value", a.ID, d.Winner)
	}
	if !queries.Equal(a.ID, e.Winner) {
		t.Error("foreign key was wrong value", a.ID, e.Winner)
	}

	if b.R.WinnerTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.WinnerTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.WinnerTeam != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.WinnerTeam != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.WinnerMatches[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.WinnerMatches[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testTeamToManyRemoveOpWinnerMatches(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e Match

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Match{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, matchDBTypes, false, strmangle.SetComplement(matchPrimaryKeyColumns, matchColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddWinnerMatches(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.WinnerMatches().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveWinnerMatches(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.WinnerMatches().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Winner) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Winner) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.WinnerTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.WinnerTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.WinnerTeam != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.WinnerTeam != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.WinnerMatches) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.WinnerMatches[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.WinnerMatches[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testTeamToManyAddOpParticipants(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e Participant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Participant{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, participantDBTypes, false, strmangle.SetComplement(participantPrimaryKeyColumns, participantColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Participant{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddParticipants(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.TeamID) {
			t.Error("foreign key was wrong value", a.ID, first.TeamID)
		}
		if !queries.Equal(a.ID, second.TeamID) {
			t.Error("foreign key was wrong value", a.ID, second.TeamID)
		}

		if first.R.Team != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Team != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Participants[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Participants[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Participants().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTeamToManySetOpParticipants(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e Participant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Participant{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, participantDBTypes, false, strmangle.SetComplement(participantPrimaryKeyColumns, participantColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetParticipants(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Participants().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetParticipants(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Participants().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.TeamID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.TeamID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.TeamID) {
		t.Error("foreign key was wrong value", a.ID, d.TeamID)
	}
	if !queries.Equal(a.ID, e.TeamID) {
		t.Error("foreign key was wrong value", a.ID, e.TeamID)
	}

	if b.R.Team != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Team != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Team != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Team != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Participants[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Participants[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testTeamToManyRemoveOpParticipants(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e Participant

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Participant{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, participantDBTypes, false, strmangle.SetComplement(participantPrimaryKeyColumns, participantColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddParticipants(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Participants().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveParticipants(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Participants().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.TeamID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.TeamID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Team != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Team != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Team != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Team != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Participants) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Participants[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Participants[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testTeamToOneBracketUsingBracket(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Team
	var foreign Bracket

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, bracketDBTypes, false, bracketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bracket struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.BracketID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Bracket().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddBracketHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Bracket) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := TeamSlice{&local}
	if err = local.L.LoadBracket(ctx, tx, false, (*[]*Team)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Bracket == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Bracket = nil
	if err = local.L.LoadBracket(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Bracket == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testTeamToOneSetOpBracketUsingBracket(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c Bracket

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, bracketDBTypes, false, strmangle.SetComplement(bracketPrimaryKeyColumns, bracketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, bracketDBTypes, false, strmangle.SetComplement(bracketPrimaryKeyColumns, bracketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Bracket{&b, &c} {
		err = a.SetBracket(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Bracket != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Teams[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.BracketID, x.ID) {
			t.Error("foreign key was wrong value", a.BracketID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.BracketID))
		reflect.Indirect(reflect.ValueOf(&a.BracketID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.BracketID, x.ID) {
			t.Error("foreign key was wrong value", a.BracketID, x.ID)
		}
	}
}

func testTeamToOneRemoveOpBracketUsingBracket(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b Bracket

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, bracketDBTypes, false, strmangle.SetComplement(bracketPrimaryKeyColumns, bracketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetBracket(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveBracket(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Bracket().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Bracket != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.BracketID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Teams) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testTeamsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Team{}
	if err = randomize.Struct(seed, o, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTeamsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Team{}
	if err = randomize.Struct(seed, o, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TeamSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testTeamsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Team{}
	if err = randomize.Struct(seed, o, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Teams().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	teamDBTypes = map[string]string{`ID`: `bigint`, `TeamAlias`: `character varying`, `BracketID`: `uuid`}
	_           = bytes.MinRead
)

func testTeamsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(teamPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(teamAllColumns) == len(teamPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Team{}
	if err = randomize.Struct(seed, o, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Teams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, teamDBTypes, true, teamPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTeamsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(teamAllColumns) == len(teamPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Team{}
	if err = randomize.Struct(seed, o, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Teams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, teamDBTypes, true, teamPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(teamAllColumns, teamPrimaryKeyColumns) {
		fields = teamAllColumns
	} else {
		fields = strmangle.SetComplement(
			teamAllColumns,
			teamPrimaryKeyColumns,
		)
		fields = strmangle.SetComplement(fields, teamGeneratedColumns)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TeamSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTeamsUpsert(t *testing.T) {
	t.Parallel()

	if len(teamAllColumns) == len(teamPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Team{}
	if err = randomize.Struct(seed, &o, teamDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Team: %s", err)
	}

	count, err := Teams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, teamDBTypes, false, teamPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Team: %s", err)
	}

	count, err = Teams().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
