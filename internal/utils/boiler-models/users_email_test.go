// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUsersEmails(t *testing.T) {
	t.Parallel()

	query := UsersEmails()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUsersEmailsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersEmail{}
	if err = randomize.Struct(seed, o, usersEmailDBTypes, true, usersEmailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersEmail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsersEmails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsersEmailsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersEmail{}
	if err = randomize.Struct(seed, o, usersEmailDBTypes, true, usersEmailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersEmail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UsersEmails().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsersEmails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsersEmailsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersEmail{}
	if err = randomize.Struct(seed, o, usersEmailDBTypes, true, usersEmailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersEmail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UsersEmailSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UsersEmails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUsersEmailsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersEmail{}
	if err = randomize.Struct(seed, o, usersEmailDBTypes, true, usersEmailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersEmail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UsersEmailExists(ctx, tx, o.Email)
	if err != nil {
		t.Errorf("Unable to check if UsersEmail exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UsersEmailExists to return true, but got false.")
	}
}

func testUsersEmailsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersEmail{}
	if err = randomize.Struct(seed, o, usersEmailDBTypes, true, usersEmailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersEmail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	usersEmailFound, err := FindUsersEmail(ctx, tx, o.Email)
	if err != nil {
		t.Error(err)
	}

	if usersEmailFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUsersEmailsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersEmail{}
	if err = randomize.Struct(seed, o, usersEmailDBTypes, true, usersEmailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersEmail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UsersEmails().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUsersEmailsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersEmail{}
	if err = randomize.Struct(seed, o, usersEmailDBTypes, true, usersEmailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersEmail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UsersEmails().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUsersEmailsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	usersEmailOne := &UsersEmail{}
	usersEmailTwo := &UsersEmail{}
	if err = randomize.Struct(seed, usersEmailOne, usersEmailDBTypes, false, usersEmailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersEmail struct: %s", err)
	}
	if err = randomize.Struct(seed, usersEmailTwo, usersEmailDBTypes, false, usersEmailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersEmail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = usersEmailOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = usersEmailTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UsersEmails().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUsersEmailsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	usersEmailOne := &UsersEmail{}
	usersEmailTwo := &UsersEmail{}
	if err = randomize.Struct(seed, usersEmailOne, usersEmailDBTypes, false, usersEmailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersEmail struct: %s", err)
	}
	if err = randomize.Struct(seed, usersEmailTwo, usersEmailDBTypes, false, usersEmailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersEmail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = usersEmailOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = usersEmailTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsersEmails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func usersEmailBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UsersEmail) error {
	*o = UsersEmail{}
	return nil
}

func usersEmailAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UsersEmail) error {
	*o = UsersEmail{}
	return nil
}

func usersEmailAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UsersEmail) error {
	*o = UsersEmail{}
	return nil
}

func usersEmailBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UsersEmail) error {
	*o = UsersEmail{}
	return nil
}

func usersEmailAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UsersEmail) error {
	*o = UsersEmail{}
	return nil
}

func usersEmailBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UsersEmail) error {
	*o = UsersEmail{}
	return nil
}

func usersEmailAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UsersEmail) error {
	*o = UsersEmail{}
	return nil
}

func usersEmailBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UsersEmail) error {
	*o = UsersEmail{}
	return nil
}

func usersEmailAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UsersEmail) error {
	*o = UsersEmail{}
	return nil
}

func testUsersEmailsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UsersEmail{}
	o := &UsersEmail{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, usersEmailDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UsersEmail object: %s", err)
	}

	AddUsersEmailHook(boil.BeforeInsertHook, usersEmailBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	usersEmailBeforeInsertHooks = []UsersEmailHook{}

	AddUsersEmailHook(boil.AfterInsertHook, usersEmailAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	usersEmailAfterInsertHooks = []UsersEmailHook{}

	AddUsersEmailHook(boil.AfterSelectHook, usersEmailAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	usersEmailAfterSelectHooks = []UsersEmailHook{}

	AddUsersEmailHook(boil.BeforeUpdateHook, usersEmailBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	usersEmailBeforeUpdateHooks = []UsersEmailHook{}

	AddUsersEmailHook(boil.AfterUpdateHook, usersEmailAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	usersEmailAfterUpdateHooks = []UsersEmailHook{}

	AddUsersEmailHook(boil.BeforeDeleteHook, usersEmailBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	usersEmailBeforeDeleteHooks = []UsersEmailHook{}

	AddUsersEmailHook(boil.AfterDeleteHook, usersEmailAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	usersEmailAfterDeleteHooks = []UsersEmailHook{}

	AddUsersEmailHook(boil.BeforeUpsertHook, usersEmailBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	usersEmailBeforeUpsertHooks = []UsersEmailHook{}

	AddUsersEmailHook(boil.AfterUpsertHook, usersEmailAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	usersEmailAfterUpsertHooks = []UsersEmailHook{}
}

func testUsersEmailsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersEmail{}
	if err = randomize.Struct(seed, o, usersEmailDBTypes, true, usersEmailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersEmail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsersEmails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUsersEmailsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersEmail{}
	if err = randomize.Struct(seed, o, usersEmailDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UsersEmail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(usersEmailColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UsersEmails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUsersEmailsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersEmail{}
	if err = randomize.Struct(seed, o, usersEmailDBTypes, true, usersEmailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersEmail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUsersEmailsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersEmail{}
	if err = randomize.Struct(seed, o, usersEmailDBTypes, true, usersEmailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersEmail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UsersEmailSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUsersEmailsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UsersEmail{}
	if err = randomize.Struct(seed, o, usersEmailDBTypes, true, usersEmailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersEmail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UsersEmails().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	usersEmailDBTypes = map[string]string{`Email`: `character varying`, `IsVerified`: `boolean`, `URLVerification`: `character varying`, `ChangeAt`: `timestamp without time zone`}
	_                 = bytes.MinRead
)

func testUsersEmailsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(usersEmailPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(usersEmailAllColumns) == len(usersEmailPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UsersEmail{}
	if err = randomize.Struct(seed, o, usersEmailDBTypes, true, usersEmailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersEmail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsersEmails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, usersEmailDBTypes, true, usersEmailPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsersEmail struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUsersEmailsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(usersEmailAllColumns) == len(usersEmailPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UsersEmail{}
	if err = randomize.Struct(seed, o, usersEmailDBTypes, true, usersEmailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UsersEmail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UsersEmails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, usersEmailDBTypes, true, usersEmailPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsersEmail struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(usersEmailAllColumns, usersEmailPrimaryKeyColumns) {
		fields = usersEmailAllColumns
	} else {
		fields = strmangle.SetComplement(
			usersEmailAllColumns,
			usersEmailPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UsersEmailSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUsersEmailsUpsert(t *testing.T) {
	t.Parallel()

	if len(usersEmailAllColumns) == len(usersEmailPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UsersEmail{}
	if err = randomize.Struct(seed, &o, usersEmailDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UsersEmail struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UsersEmail: %s", err)
	}

	count, err := UsersEmails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, usersEmailDBTypes, false, usersEmailPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UsersEmail struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UsersEmail: %s", err)
	}

	count, err = UsersEmails().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
