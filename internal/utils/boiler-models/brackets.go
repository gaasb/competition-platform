// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Bracket is an object representing the database table.
type Bracket struct {
	ID                  string        `boil:"id" json:"id" toml:"id" yaml:"id"`
	TypeOf              BracketType   `boil:"type_of" json:"type_of" toml:"type_of" yaml:"type_of"`
	MaxTeams            null.Int      `boil:"max_teams" json:"max_teams,omitempty" toml:"max_teams" yaml:"max_teams,omitempty"`
	MaxTeamParticipants int           `boil:"max_team_participants" json:"max_team_participants" toml:"max_team_participants" yaml:"max_team_participants"`
	TournamentID        null.String   `boil:"tournament_id" json:"tournament_id,omitempty" toml:"tournament_id" yaml:"tournament_id,omitempty"`
	PlayoffRounds       int           `boil:"playoff_rounds" json:"playoff_rounds" toml:"playoff_rounds" yaml:"playoff_rounds"`
	FinalRounds         int           `boil:"final_rounds" json:"final_rounds" toml:"final_rounds" yaml:"final_rounds"`
	GrandFinalRounds    int           `boil:"grand_final_rounds" json:"grand_final_rounds" toml:"grand_final_rounds" yaml:"grand_final_rounds"`
	Status              BracketStatus `boil:"status" json:"status" toml:"status" yaml:"status"`

	R *bracketR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L bracketL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BracketColumns = struct {
	ID                  string
	TypeOf              string
	MaxTeams            string
	MaxTeamParticipants string
	TournamentID        string
	PlayoffRounds       string
	FinalRounds         string
	GrandFinalRounds    string
	Status              string
}{
	ID:                  "id",
	TypeOf:              "type_of",
	MaxTeams:            "max_teams",
	MaxTeamParticipants: "max_team_participants",
	TournamentID:        "tournament_id",
	PlayoffRounds:       "playoff_rounds",
	FinalRounds:         "final_rounds",
	GrandFinalRounds:    "grand_final_rounds",
	Status:              "status",
}

var BracketTableColumns = struct {
	ID                  string
	TypeOf              string
	MaxTeams            string
	MaxTeamParticipants string
	TournamentID        string
	PlayoffRounds       string
	FinalRounds         string
	GrandFinalRounds    string
	Status              string
}{
	ID:                  "brackets.id",
	TypeOf:              "brackets.type_of",
	MaxTeams:            "brackets.max_teams",
	MaxTeamParticipants: "brackets.max_team_participants",
	TournamentID:        "brackets.tournament_id",
	PlayoffRounds:       "brackets.playoff_rounds",
	FinalRounds:         "brackets.final_rounds",
	GrandFinalRounds:    "brackets.grand_final_rounds",
	Status:              "brackets.status",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperBracketType struct{ field string }

func (w whereHelperBracketType) EQ(x BracketType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperBracketType) NEQ(x BracketType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperBracketType) LT(x BracketType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperBracketType) LTE(x BracketType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperBracketType) GT(x BracketType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperBracketType) GTE(x BracketType) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperBracketType) IN(slice []BracketType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperBracketType) NIN(slice []BracketType) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperBracketStatus struct{ field string }

func (w whereHelperBracketStatus) EQ(x BracketStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperBracketStatus) NEQ(x BracketStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperBracketStatus) LT(x BracketStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperBracketStatus) LTE(x BracketStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperBracketStatus) GT(x BracketStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperBracketStatus) GTE(x BracketStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperBracketStatus) IN(slice []BracketStatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperBracketStatus) NIN(slice []BracketStatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var BracketWhere = struct {
	ID                  whereHelperstring
	TypeOf              whereHelperBracketType
	MaxTeams            whereHelpernull_Int
	MaxTeamParticipants whereHelperint
	TournamentID        whereHelpernull_String
	PlayoffRounds       whereHelperint
	FinalRounds         whereHelperint
	GrandFinalRounds    whereHelperint
	Status              whereHelperBracketStatus
}{
	ID:                  whereHelperstring{field: "\"brackets\".\"id\""},
	TypeOf:              whereHelperBracketType{field: "\"brackets\".\"type_of\""},
	MaxTeams:            whereHelpernull_Int{field: "\"brackets\".\"max_teams\""},
	MaxTeamParticipants: whereHelperint{field: "\"brackets\".\"max_team_participants\""},
	TournamentID:        whereHelpernull_String{field: "\"brackets\".\"tournament_id\""},
	PlayoffRounds:       whereHelperint{field: "\"brackets\".\"playoff_rounds\""},
	FinalRounds:         whereHelperint{field: "\"brackets\".\"final_rounds\""},
	GrandFinalRounds:    whereHelperint{field: "\"brackets\".\"grand_final_rounds\""},
	Status:              whereHelperBracketStatus{field: "\"brackets\".\"status\""},
}

// BracketRels is where relationship names are stored.
var BracketRels = struct {
	Tournament string
	Matches    string
	Teams      string
}{
	Tournament: "Tournament",
	Matches:    "Matches",
	Teams:      "Teams",
}

// bracketR is where relationships are stored.
type bracketR struct {
	Tournament *Tournament `boil:"Tournament" json:"Tournament" toml:"Tournament" yaml:"Tournament"`
	Matches    MatchSlice  `boil:"Matches" json:"Matches" toml:"Matches" yaml:"Matches"`
	Teams      TeamSlice   `boil:"Teams" json:"Teams" toml:"Teams" yaml:"Teams"`
}

// NewStruct creates a new relationship struct
func (*bracketR) NewStruct() *bracketR {
	return &bracketR{}
}

func (r *bracketR) GetTournament() *Tournament {
	if r == nil {
		return nil
	}
	return r.Tournament
}

func (r *bracketR) GetMatches() MatchSlice {
	if r == nil {
		return nil
	}
	return r.Matches
}

func (r *bracketR) GetTeams() TeamSlice {
	if r == nil {
		return nil
	}
	return r.Teams
}

// bracketL is where Load methods for each relationship are stored.
type bracketL struct{}

var (
	bracketAllColumns            = []string{"id", "type_of", "max_teams", "max_team_participants", "tournament_id", "playoff_rounds", "final_rounds", "grand_final_rounds", "status"}
	bracketColumnsWithoutDefault = []string{"id", "type_of"}
	bracketColumnsWithDefault    = []string{"max_teams", "max_team_participants", "tournament_id", "playoff_rounds", "final_rounds", "grand_final_rounds", "status"}
	bracketPrimaryKeyColumns     = []string{"id"}
	bracketGeneratedColumns      = []string{}
)

type (
	// BracketSlice is an alias for a slice of pointers to Bracket.
	// This should almost always be used instead of []Bracket.
	BracketSlice []*Bracket
	// BracketHook is the signature for custom Bracket hook methods
	BracketHook func(context.Context, boil.ContextExecutor, *Bracket) error

	bracketQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bracketType                 = reflect.TypeOf(&Bracket{})
	bracketMapping              = queries.MakeStructMapping(bracketType)
	bracketPrimaryKeyMapping, _ = queries.BindMapping(bracketType, bracketMapping, bracketPrimaryKeyColumns)
	bracketInsertCacheMut       sync.RWMutex
	bracketInsertCache          = make(map[string]insertCache)
	bracketUpdateCacheMut       sync.RWMutex
	bracketUpdateCache          = make(map[string]updateCache)
	bracketUpsertCacheMut       sync.RWMutex
	bracketUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var bracketAfterSelectHooks []BracketHook

var bracketBeforeInsertHooks []BracketHook
var bracketAfterInsertHooks []BracketHook

var bracketBeforeUpdateHooks []BracketHook
var bracketAfterUpdateHooks []BracketHook

var bracketBeforeDeleteHooks []BracketHook
var bracketAfterDeleteHooks []BracketHook

var bracketBeforeUpsertHooks []BracketHook
var bracketAfterUpsertHooks []BracketHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Bracket) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bracketAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Bracket) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bracketBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Bracket) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bracketAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Bracket) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bracketBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Bracket) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bracketAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Bracket) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bracketBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Bracket) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bracketAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Bracket) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bracketBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Bracket) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bracketAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBracketHook registers your hook function for all future operations.
func AddBracketHook(hookPoint boil.HookPoint, bracketHook BracketHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		bracketAfterSelectHooks = append(bracketAfterSelectHooks, bracketHook)
	case boil.BeforeInsertHook:
		bracketBeforeInsertHooks = append(bracketBeforeInsertHooks, bracketHook)
	case boil.AfterInsertHook:
		bracketAfterInsertHooks = append(bracketAfterInsertHooks, bracketHook)
	case boil.BeforeUpdateHook:
		bracketBeforeUpdateHooks = append(bracketBeforeUpdateHooks, bracketHook)
	case boil.AfterUpdateHook:
		bracketAfterUpdateHooks = append(bracketAfterUpdateHooks, bracketHook)
	case boil.BeforeDeleteHook:
		bracketBeforeDeleteHooks = append(bracketBeforeDeleteHooks, bracketHook)
	case boil.AfterDeleteHook:
		bracketAfterDeleteHooks = append(bracketAfterDeleteHooks, bracketHook)
	case boil.BeforeUpsertHook:
		bracketBeforeUpsertHooks = append(bracketBeforeUpsertHooks, bracketHook)
	case boil.AfterUpsertHook:
		bracketAfterUpsertHooks = append(bracketAfterUpsertHooks, bracketHook)
	}
}

// One returns a single bracket record from the query.
func (q bracketQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Bracket, error) {
	o := &Bracket{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for brackets")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Bracket records from the query.
func (q bracketQuery) All(ctx context.Context, exec boil.ContextExecutor) (BracketSlice, error) {
	var o []*Bracket

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Bracket slice")
	}

	if len(bracketAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Bracket records in the query.
func (q bracketQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count brackets rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q bracketQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if brackets exists")
	}

	return count > 0, nil
}

// Tournament pointed to by the foreign key.
func (o *Bracket) Tournament(mods ...qm.QueryMod) tournamentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TournamentID),
	}

	queryMods = append(queryMods, mods...)

	return Tournaments(queryMods...)
}

// Matches retrieves all the match's Matches with an executor.
func (o *Bracket) Matches(mods ...qm.QueryMod) matchQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"matches\".\"bracket_id\"=?", o.ID),
	)

	return Matches(queryMods...)
}

// Teams retrieves all the team's Teams with an executor.
func (o *Bracket) Teams(mods ...qm.QueryMod) teamQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"teams\".\"bracket_id\"=?", o.ID),
	)

	return Teams(queryMods...)
}

// LoadTournament allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (bracketL) LoadTournament(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBracket interface{}, mods queries.Applicator) error {
	var slice []*Bracket
	var object *Bracket

	if singular {
		var ok bool
		object, ok = maybeBracket.(*Bracket)
		if !ok {
			object = new(Bracket)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBracket)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBracket))
			}
		}
	} else {
		s, ok := maybeBracket.(*[]*Bracket)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBracket)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBracket))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bracketR{}
		}
		if !queries.IsNil(object.TournamentID) {
			args = append(args, object.TournamentID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bracketR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TournamentID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.TournamentID) {
				args = append(args, obj.TournamentID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`tournaments`),
		qm.WhereIn(`tournaments.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tournament")
	}

	var resultSlice []*Tournament
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tournament")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tournaments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tournaments")
	}

	if len(tournamentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Tournament = foreign
		if foreign.R == nil {
			foreign.R = &tournamentR{}
		}
		foreign.R.Brackets = append(foreign.R.Brackets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TournamentID, foreign.ID) {
				local.R.Tournament = foreign
				if foreign.R == nil {
					foreign.R = &tournamentR{}
				}
				foreign.R.Brackets = append(foreign.R.Brackets, local)
				break
			}
		}
	}

	return nil
}

// LoadMatches allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (bracketL) LoadMatches(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBracket interface{}, mods queries.Applicator) error {
	var slice []*Bracket
	var object *Bracket

	if singular {
		var ok bool
		object, ok = maybeBracket.(*Bracket)
		if !ok {
			object = new(Bracket)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBracket)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBracket))
			}
		}
	} else {
		s, ok := maybeBracket.(*[]*Bracket)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBracket)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBracket))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bracketR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bracketR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`matches`),
		qm.WhereIn(`matches.bracket_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load matches")
	}

	var resultSlice []*Match
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice matches")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on matches")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for matches")
	}

	if len(matchAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Matches = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &matchR{}
			}
			foreign.R.Bracket = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.BracketID) {
				local.R.Matches = append(local.R.Matches, foreign)
				if foreign.R == nil {
					foreign.R = &matchR{}
				}
				foreign.R.Bracket = local
				break
			}
		}
	}

	return nil
}

// LoadTeams allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (bracketL) LoadTeams(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBracket interface{}, mods queries.Applicator) error {
	var slice []*Bracket
	var object *Bracket

	if singular {
		var ok bool
		object, ok = maybeBracket.(*Bracket)
		if !ok {
			object = new(Bracket)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeBracket)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeBracket))
			}
		}
	} else {
		s, ok := maybeBracket.(*[]*Bracket)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeBracket)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeBracket))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bracketR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bracketR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`teams`),
		qm.WhereIn(`teams.bracket_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load teams")
	}

	var resultSlice []*Team
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice teams")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on teams")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for teams")
	}

	if len(teamAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Teams = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &teamR{}
			}
			foreign.R.Bracket = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.BracketID) {
				local.R.Teams = append(local.R.Teams, foreign)
				if foreign.R == nil {
					foreign.R = &teamR{}
				}
				foreign.R.Bracket = local
				break
			}
		}
	}

	return nil
}

// SetTournament of the bracket to the related item.
// Sets o.R.Tournament to related.
// Adds o to related.R.Brackets.
func (o *Bracket) SetTournament(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Tournament) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"brackets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"tournament_id"}),
		strmangle.WhereClause("\"", "\"", 2, bracketPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TournamentID, related.ID)
	if o.R == nil {
		o.R = &bracketR{
			Tournament: related,
		}
	} else {
		o.R.Tournament = related
	}

	if related.R == nil {
		related.R = &tournamentR{
			Brackets: BracketSlice{o},
		}
	} else {
		related.R.Brackets = append(related.R.Brackets, o)
	}

	return nil
}

// RemoveTournament relationship.
// Sets o.R.Tournament to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Bracket) RemoveTournament(ctx context.Context, exec boil.ContextExecutor, related *Tournament) error {
	var err error

	queries.SetScanner(&o.TournamentID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("tournament_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Tournament = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Brackets {
		if queries.Equal(o.TournamentID, ri.TournamentID) {
			continue
		}

		ln := len(related.R.Brackets)
		if ln > 1 && i < ln-1 {
			related.R.Brackets[i] = related.R.Brackets[ln-1]
		}
		related.R.Brackets = related.R.Brackets[:ln-1]
		break
	}
	return nil
}

// AddMatches adds the given related objects to the existing relationships
// of the bracket, optionally inserting them as new records.
// Appends related to o.R.Matches.
// Sets related.R.Bracket appropriately.
func (o *Bracket) AddMatches(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Match) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BracketID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"matches\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"bracket_id"}),
				strmangle.WhereClause("\"", "\"", 2, matchPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BracketID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &bracketR{
			Matches: related,
		}
	} else {
		o.R.Matches = append(o.R.Matches, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &matchR{
				Bracket: o,
			}
		} else {
			rel.R.Bracket = o
		}
	}
	return nil
}

// SetMatches removes all previously related items of the
// bracket replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Bracket's Matches accordingly.
// Replaces o.R.Matches with related.
// Sets related.R.Bracket's Matches accordingly.
func (o *Bracket) SetMatches(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Match) error {
	query := "update \"matches\" set \"bracket_id\" = null where \"bracket_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Matches {
			queries.SetScanner(&rel.BracketID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Bracket = nil
		}
		o.R.Matches = nil
	}

	return o.AddMatches(ctx, exec, insert, related...)
}

// RemoveMatches relationships from objects passed in.
// Removes related items from R.Matches (uses pointer comparison, removal does not keep order)
// Sets related.R.Bracket.
func (o *Bracket) RemoveMatches(ctx context.Context, exec boil.ContextExecutor, related ...*Match) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BracketID, nil)
		if rel.R != nil {
			rel.R.Bracket = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("bracket_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Matches {
			if rel != ri {
				continue
			}

			ln := len(o.R.Matches)
			if ln > 1 && i < ln-1 {
				o.R.Matches[i] = o.R.Matches[ln-1]
			}
			o.R.Matches = o.R.Matches[:ln-1]
			break
		}
	}

	return nil
}

// AddTeams adds the given related objects to the existing relationships
// of the bracket, optionally inserting them as new records.
// Appends related to o.R.Teams.
// Sets related.R.Bracket appropriately.
func (o *Bracket) AddTeams(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Team) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.BracketID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"teams\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"bracket_id"}),
				strmangle.WhereClause("\"", "\"", 2, teamPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.BracketID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &bracketR{
			Teams: related,
		}
	} else {
		o.R.Teams = append(o.R.Teams, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &teamR{
				Bracket: o,
			}
		} else {
			rel.R.Bracket = o
		}
	}
	return nil
}

// SetTeams removes all previously related items of the
// bracket replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Bracket's Teams accordingly.
// Replaces o.R.Teams with related.
// Sets related.R.Bracket's Teams accordingly.
func (o *Bracket) SetTeams(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Team) error {
	query := "update \"teams\" set \"bracket_id\" = null where \"bracket_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Teams {
			queries.SetScanner(&rel.BracketID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Bracket = nil
		}
		o.R.Teams = nil
	}

	return o.AddTeams(ctx, exec, insert, related...)
}

// RemoveTeams relationships from objects passed in.
// Removes related items from R.Teams (uses pointer comparison, removal does not keep order)
// Sets related.R.Bracket.
func (o *Bracket) RemoveTeams(ctx context.Context, exec boil.ContextExecutor, related ...*Team) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.BracketID, nil)
		if rel.R != nil {
			rel.R.Bracket = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("bracket_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Teams {
			if rel != ri {
				continue
			}

			ln := len(o.R.Teams)
			if ln > 1 && i < ln-1 {
				o.R.Teams[i] = o.R.Teams[ln-1]
			}
			o.R.Teams = o.R.Teams[:ln-1]
			break
		}
	}

	return nil
}

// Brackets retrieves all the records using an executor.
func Brackets(mods ...qm.QueryMod) bracketQuery {
	mods = append(mods, qm.From("\"brackets\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"brackets\".*"})
	}

	return bracketQuery{q}
}

// FindBracket retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBracket(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Bracket, error) {
	bracketObj := &Bracket{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"brackets\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, bracketObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from brackets")
	}

	if err = bracketObj.doAfterSelectHooks(ctx, exec); err != nil {
		return bracketObj, err
	}

	return bracketObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Bracket) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no brackets provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bracketColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bracketInsertCacheMut.RLock()
	cache, cached := bracketInsertCache[key]
	bracketInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bracketAllColumns,
			bracketColumnsWithDefault,
			bracketColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(bracketType, bracketMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bracketType, bracketMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"brackets\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"brackets\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into brackets")
	}

	if !cached {
		bracketInsertCacheMut.Lock()
		bracketInsertCache[key] = cache
		bracketInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Bracket.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Bracket) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	bracketUpdateCacheMut.RLock()
	cache, cached := bracketUpdateCache[key]
	bracketUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bracketAllColumns,
			bracketPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update brackets, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"brackets\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, bracketPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bracketType, bracketMapping, append(wl, bracketPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update brackets row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for brackets")
	}

	if !cached {
		bracketUpdateCacheMut.Lock()
		bracketUpdateCache[key] = cache
		bracketUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q bracketQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for brackets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for brackets")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BracketSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bracketPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"brackets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, bracketPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in bracket slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all bracket")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Bracket) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no brackets provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bracketColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	bracketUpsertCacheMut.RLock()
	cache, cached := bracketUpsertCache[key]
	bracketUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			bracketAllColumns,
			bracketColumnsWithDefault,
			bracketColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			bracketAllColumns,
			bracketPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert brackets, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(bracketPrimaryKeyColumns))
			copy(conflict, bracketPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"brackets\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(bracketType, bracketMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(bracketType, bracketMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert brackets")
	}

	if !cached {
		bracketUpsertCacheMut.Lock()
		bracketUpsertCache[key] = cache
		bracketUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Bracket record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Bracket) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no Bracket provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bracketPrimaryKeyMapping)
	sql := "DELETE FROM \"brackets\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from brackets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for brackets")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q bracketQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no bracketQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from brackets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for brackets")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BracketSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(bracketBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bracketPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"brackets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, bracketPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from bracket slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for brackets")
	}

	if len(bracketAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Bracket) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBracket(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BracketSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BracketSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bracketPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"brackets\".* FROM \"brackets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, bracketPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in BracketSlice")
	}

	*o = slice

	return nil
}

// BracketExists checks if the Bracket row exists.
func BracketExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"brackets\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if brackets exists")
	}

	return exists, nil
}

// Exists checks if the Bracket row exists.
func (o *Bracket) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BracketExists(ctx, exec, o.ID)
}
