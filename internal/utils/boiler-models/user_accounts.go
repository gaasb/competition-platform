// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserAccount is an object representing the database table.
type UserAccount struct {
	ID        int64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserLogin string `boil:"user_login" json:"user_login" toml:"user_login" yaml:"user_login"`

	R *userAccountR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userAccountL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserAccountColumns = struct {
	ID        string
	UserLogin string
}{
	ID:        "id",
	UserLogin: "user_login",
}

var UserAccountTableColumns = struct {
	ID        string
	UserLogin string
}{
	ID:        "user_accounts.id",
	UserLogin: "user_accounts.user_login",
}

// Generated where

var UserAccountWhere = struct {
	ID        whereHelperint64
	UserLogin whereHelperstring
}{
	ID:        whereHelperint64{field: "\"user_accounts\".\"id\""},
	UserLogin: whereHelperstring{field: "\"user_accounts\".\"user_login\""},
}

// UserAccountRels is where relationship names are stored.
var UserAccountRels = struct {
	UserUserToken            string
	CreatedByUserTournaments string
}{
	UserUserToken:            "UserUserToken",
	CreatedByUserTournaments: "CreatedByUserTournaments",
}

// userAccountR is where relationships are stored.
type userAccountR struct {
	UserUserToken            *UserToken      `boil:"UserUserToken" json:"UserUserToken" toml:"UserUserToken" yaml:"UserUserToken"`
	CreatedByUserTournaments TournamentSlice `boil:"CreatedByUserTournaments" json:"CreatedByUserTournaments" toml:"CreatedByUserTournaments" yaml:"CreatedByUserTournaments"`
}

// NewStruct creates a new relationship struct
func (*userAccountR) NewStruct() *userAccountR {
	return &userAccountR{}
}

func (r *userAccountR) GetUserUserToken() *UserToken {
	if r == nil {
		return nil
	}
	return r.UserUserToken
}

func (r *userAccountR) GetCreatedByUserTournaments() TournamentSlice {
	if r == nil {
		return nil
	}
	return r.CreatedByUserTournaments
}

// userAccountL is where Load methods for each relationship are stored.
type userAccountL struct{}

var (
	userAccountAllColumns            = []string{"id", "user_login"}
	userAccountColumnsWithoutDefault = []string{"user_login"}
	userAccountColumnsWithDefault    = []string{"id"}
	userAccountPrimaryKeyColumns     = []string{"id"}
	userAccountGeneratedColumns      = []string{"id"}
)

type (
	// UserAccountSlice is an alias for a slice of pointers to UserAccount.
	// This should almost always be used instead of []UserAccount.
	UserAccountSlice []*UserAccount
	// UserAccountHook is the signature for custom UserAccount hook methods
	UserAccountHook func(context.Context, boil.ContextExecutor, *UserAccount) error

	userAccountQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userAccountType                 = reflect.TypeOf(&UserAccount{})
	userAccountMapping              = queries.MakeStructMapping(userAccountType)
	userAccountPrimaryKeyMapping, _ = queries.BindMapping(userAccountType, userAccountMapping, userAccountPrimaryKeyColumns)
	userAccountInsertCacheMut       sync.RWMutex
	userAccountInsertCache          = make(map[string]insertCache)
	userAccountUpdateCacheMut       sync.RWMutex
	userAccountUpdateCache          = make(map[string]updateCache)
	userAccountUpsertCacheMut       sync.RWMutex
	userAccountUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userAccountAfterSelectHooks []UserAccountHook

var userAccountBeforeInsertHooks []UserAccountHook
var userAccountAfterInsertHooks []UserAccountHook

var userAccountBeforeUpdateHooks []UserAccountHook
var userAccountAfterUpdateHooks []UserAccountHook

var userAccountBeforeDeleteHooks []UserAccountHook
var userAccountAfterDeleteHooks []UserAccountHook

var userAccountBeforeUpsertHooks []UserAccountHook
var userAccountAfterUpsertHooks []UserAccountHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserAccount) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAccountAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserAccount) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAccountBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserAccount) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAccountAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserAccount) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAccountBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserAccount) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAccountAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserAccount) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAccountBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserAccount) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAccountAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserAccount) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAccountBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserAccount) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userAccountAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserAccountHook registers your hook function for all future operations.
func AddUserAccountHook(hookPoint boil.HookPoint, userAccountHook UserAccountHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userAccountAfterSelectHooks = append(userAccountAfterSelectHooks, userAccountHook)
	case boil.BeforeInsertHook:
		userAccountBeforeInsertHooks = append(userAccountBeforeInsertHooks, userAccountHook)
	case boil.AfterInsertHook:
		userAccountAfterInsertHooks = append(userAccountAfterInsertHooks, userAccountHook)
	case boil.BeforeUpdateHook:
		userAccountBeforeUpdateHooks = append(userAccountBeforeUpdateHooks, userAccountHook)
	case boil.AfterUpdateHook:
		userAccountAfterUpdateHooks = append(userAccountAfterUpdateHooks, userAccountHook)
	case boil.BeforeDeleteHook:
		userAccountBeforeDeleteHooks = append(userAccountBeforeDeleteHooks, userAccountHook)
	case boil.AfterDeleteHook:
		userAccountAfterDeleteHooks = append(userAccountAfterDeleteHooks, userAccountHook)
	case boil.BeforeUpsertHook:
		userAccountBeforeUpsertHooks = append(userAccountBeforeUpsertHooks, userAccountHook)
	case boil.AfterUpsertHook:
		userAccountAfterUpsertHooks = append(userAccountAfterUpsertHooks, userAccountHook)
	}
}

// One returns a single userAccount record from the query.
func (q userAccountQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserAccount, error) {
	o := &UserAccount{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for user_accounts")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserAccount records from the query.
func (q userAccountQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserAccountSlice, error) {
	var o []*UserAccount

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to UserAccount slice")
	}

	if len(userAccountAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserAccount records in the query.
func (q userAccountQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count user_accounts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userAccountQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if user_accounts exists")
	}

	return count > 0, nil
}

// UserUserToken pointed to by the foreign key.
func (o *UserAccount) UserUserToken(mods ...qm.QueryMod) userTokenQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"user_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return UserTokens(queryMods...)
}

// CreatedByUserTournaments retrieves all the tournament's Tournaments with an executor via created_by_user column.
func (o *UserAccount) CreatedByUserTournaments(mods ...qm.QueryMod) tournamentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"tournaments\".\"created_by_user\"=?", o.ID),
	)

	return Tournaments(queryMods...)
}

// LoadUserUserToken allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (userAccountL) LoadUserUserToken(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserAccount interface{}, mods queries.Applicator) error {
	var slice []*UserAccount
	var object *UserAccount

	if singular {
		var ok bool
		object, ok = maybeUserAccount.(*UserAccount)
		if !ok {
			object = new(UserAccount)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserAccount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserAccount))
			}
		}
	} else {
		s, ok := maybeUserAccount.(*[]*UserAccount)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserAccount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserAccount))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userAccountR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userAccountR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_tokens`),
		qm.WhereIn(`user_tokens.user_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserToken")
	}

	var resultSlice []*UserToken
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserToken")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_tokens")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_tokens")
	}

	if len(userTokenAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserUserToken = foreign
		if foreign.R == nil {
			foreign.R = &userTokenR{}
		}
		foreign.R.User = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.UserID {
				local.R.UserUserToken = foreign
				if foreign.R == nil {
					foreign.R = &userTokenR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// LoadCreatedByUserTournaments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userAccountL) LoadCreatedByUserTournaments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserAccount interface{}, mods queries.Applicator) error {
	var slice []*UserAccount
	var object *UserAccount

	if singular {
		var ok bool
		object, ok = maybeUserAccount.(*UserAccount)
		if !ok {
			object = new(UserAccount)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserAccount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserAccount))
			}
		}
	} else {
		s, ok := maybeUserAccount.(*[]*UserAccount)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserAccount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserAccount))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userAccountR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userAccountR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`tournaments`),
		qm.WhereIn(`tournaments.created_by_user in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tournaments")
	}

	var resultSlice []*Tournament
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tournaments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tournaments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tournaments")
	}

	if len(tournamentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CreatedByUserTournaments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tournamentR{}
			}
			foreign.R.CreatedByUserUserAccount = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CreatedByUser) {
				local.R.CreatedByUserTournaments = append(local.R.CreatedByUserTournaments, foreign)
				if foreign.R == nil {
					foreign.R = &tournamentR{}
				}
				foreign.R.CreatedByUserUserAccount = local
				break
			}
		}
	}

	return nil
}

// SetUserUserToken of the userAccount to the related item.
// Sets o.R.UserUserToken to related.
// Adds o to related.R.User.
func (o *UserAccount) SetUserUserToken(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserToken) error {
	var err error

	if insert {
		related.UserID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"user_tokens\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
			strmangle.WhereClause("\"", "\"", 2, userTokenPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.UserID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.UserID = o.ID
	}

	if o.R == nil {
		o.R = &userAccountR{
			UserUserToken: related,
		}
	} else {
		o.R.UserUserToken = related
	}

	if related.R == nil {
		related.R = &userTokenR{
			User: o,
		}
	} else {
		related.R.User = o
	}
	return nil
}

// AddCreatedByUserTournaments adds the given related objects to the existing relationships
// of the user_account, optionally inserting them as new records.
// Appends related to o.R.CreatedByUserTournaments.
// Sets related.R.CreatedByUserUserAccount appropriately.
func (o *UserAccount) AddCreatedByUserTournaments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Tournament) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CreatedByUser, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"tournaments\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_user"}),
				strmangle.WhereClause("\"", "\"", 2, tournamentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CreatedByUser, o.ID)
		}
	}

	if o.R == nil {
		o.R = &userAccountR{
			CreatedByUserTournaments: related,
		}
	} else {
		o.R.CreatedByUserTournaments = append(o.R.CreatedByUserTournaments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tournamentR{
				CreatedByUserUserAccount: o,
			}
		} else {
			rel.R.CreatedByUserUserAccount = o
		}
	}
	return nil
}

// SetCreatedByUserTournaments removes all previously related items of the
// user_account replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CreatedByUserUserAccount's CreatedByUserTournaments accordingly.
// Replaces o.R.CreatedByUserTournaments with related.
// Sets related.R.CreatedByUserUserAccount's CreatedByUserTournaments accordingly.
func (o *UserAccount) SetCreatedByUserTournaments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Tournament) error {
	query := "update \"tournaments\" set \"created_by_user\" = null where \"created_by_user\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CreatedByUserTournaments {
			queries.SetScanner(&rel.CreatedByUser, nil)
			if rel.R == nil {
				continue
			}

			rel.R.CreatedByUserUserAccount = nil
		}
		o.R.CreatedByUserTournaments = nil
	}

	return o.AddCreatedByUserTournaments(ctx, exec, insert, related...)
}

// RemoveCreatedByUserTournaments relationships from objects passed in.
// Removes related items from R.CreatedByUserTournaments (uses pointer comparison, removal does not keep order)
// Sets related.R.CreatedByUserUserAccount.
func (o *UserAccount) RemoveCreatedByUserTournaments(ctx context.Context, exec boil.ContextExecutor, related ...*Tournament) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CreatedByUser, nil)
		if rel.R != nil {
			rel.R.CreatedByUserUserAccount = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("created_by_user")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CreatedByUserTournaments {
			if rel != ri {
				continue
			}

			ln := len(o.R.CreatedByUserTournaments)
			if ln > 1 && i < ln-1 {
				o.R.CreatedByUserTournaments[i] = o.R.CreatedByUserTournaments[ln-1]
			}
			o.R.CreatedByUserTournaments = o.R.CreatedByUserTournaments[:ln-1]
			break
		}
	}

	return nil
}

// UserAccounts retrieves all the records using an executor.
func UserAccounts(mods ...qm.QueryMod) userAccountQuery {
	mods = append(mods, qm.From("\"user_accounts\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_accounts\".*"})
	}

	return userAccountQuery{q}
}

// FindUserAccount retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserAccount(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*UserAccount, error) {
	userAccountObj := &UserAccount{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_accounts\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userAccountObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from user_accounts")
	}

	if err = userAccountObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userAccountObj, err
	}

	return userAccountObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserAccount) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no user_accounts provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userAccountColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userAccountInsertCacheMut.RLock()
	cache, cached := userAccountInsertCache[key]
	userAccountInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userAccountAllColumns,
			userAccountColumnsWithDefault,
			userAccountColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, userAccountGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(userAccountType, userAccountMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userAccountType, userAccountMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_accounts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_accounts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into user_accounts")
	}

	if !cached {
		userAccountInsertCacheMut.Lock()
		userAccountInsertCache[key] = cache
		userAccountInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserAccount.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserAccount) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userAccountUpdateCacheMut.RLock()
	cache, cached := userAccountUpdateCache[key]
	userAccountUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userAccountAllColumns,
			userAccountPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, userAccountGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update user_accounts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_accounts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userAccountPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userAccountType, userAccountMapping, append(wl, userAccountPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update user_accounts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for user_accounts")
	}

	if !cached {
		userAccountUpdateCacheMut.Lock()
		userAccountUpdateCache[key] = cache
		userAccountUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userAccountQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for user_accounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for user_accounts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserAccountSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_accounts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userAccountPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in userAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all userAccount")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserAccount) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no user_accounts provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userAccountColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userAccountUpsertCacheMut.RLock()
	cache, cached := userAccountUpsertCache[key]
	userAccountUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userAccountAllColumns,
			userAccountColumnsWithDefault,
			userAccountColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userAccountAllColumns,
			userAccountPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, userAccountGeneratedColumns)
		update = strmangle.SetComplement(update, userAccountGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("model: unable to upsert user_accounts, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userAccountPrimaryKeyColumns))
			copy(conflict, userAccountPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_accounts\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userAccountType, userAccountMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userAccountType, userAccountMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "model: unable to upsert user_accounts")
	}

	if !cached {
		userAccountUpsertCacheMut.Lock()
		userAccountUpsertCache[key] = cache
		userAccountUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserAccount record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserAccount) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no UserAccount provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userAccountPrimaryKeyMapping)
	sql := "DELETE FROM \"user_accounts\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from user_accounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for user_accounts")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userAccountQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no userAccountQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from user_accounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for user_accounts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserAccountSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userAccountBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_accounts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userAccountPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from userAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for user_accounts")
	}

	if len(userAccountAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserAccount) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserAccount(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserAccountSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserAccountSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_accounts\".* FROM \"user_accounts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userAccountPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in UserAccountSlice")
	}

	*o = slice

	return nil
}

// UserAccountExists checks if the UserAccount row exists.
func UserAccountExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_accounts\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if user_accounts exists")
	}

	return exists, nil
}

// Exists checks if the UserAccount row exists.
func (o *UserAccount) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserAccountExists(ctx, exec, o.ID)
}
